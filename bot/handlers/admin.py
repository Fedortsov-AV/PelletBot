from aiogram import Router, types, F
from aiogram.filters import Command
from aiogram.types import CallbackQuery
from sqlalchemy.ext.asyncio import AsyncSession

from bot.keyboards.admin import get_admin_menu
from bot.keyboards.users import get_user_list_keyboard
from bot.keyboards.roles import get_role_selection_keyboard
from bot.services.auth import get_user_role, update_user_role, get_all_users
from bot.services.role_service import get_all_roles

router = Router()


@router.message(Command("admin"))
async def admin_panel(message: types.Message, session: AsyncSession):
    """ –û—Ç–∫—Ä—ã–≤–∞–µ—Ç –ø–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞. """
    role = await get_user_role(session, message.from_user.id)

    if role != "admin":
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å.")
        return

    await message.answer("üîß –ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞", reply_markup=get_admin_menu())


@router.message(F.text == "üîß –ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞")
async def admin_panel(message: types.Message, session: AsyncSession):
    role = await get_user_role(session, message.from_user.id)

    if role != "admin":
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å.")
        return

    await message.answer("üîß –ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞", reply_markup=get_admin_menu())

@router.callback_query(F.data == "admin_users_list")
async def show_users(callback: CallbackQuery, session: AsyncSession):
    """ –û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π. """
    users = await get_all_users(session)

    if not users:
        await callback.message.answer("üì≠ –í –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–∫–∞ –Ω–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.")
        return

    for user in users:
        await callback.message.answer(
            f"üë§ {user.full_name} (ID: {user.telegram_id})\n–†–æ–ª—å: {user.role}",
            reply_markup=get_user_list_keyboard(user.telegram_id)
        )
    await callback.answer()

@router.callback_query(F.data.startswith("change_role:"))
async def ask_for_role_selection(callback: CallbackQuery, session: AsyncSession):
    """ –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –Ω–æ–≤—É—é —Ä–æ–ª—å —É –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞. """
    user_id = int(callback.data.split(":")[1])

    # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —Ä–æ–ª–µ–π –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    roles = await get_all_roles(session)

    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å —Ä–æ–ª—è–º–∏
    role_buttons = [types.InlineKeyboardButton(text=role.name, callback_data=f"set_role:{user_id}:{role.name}") for role in roles]
    keyboard = types.InlineKeyboardMarkup(inline_keyboard=[role_buttons])

    await callback.message.answer(
        f"üîÑ –ù–∞ –∫–∞–∫—É—é —Ä–æ–ª—å –∏–∑–º–µ–Ω–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}?",
        reply_markup=keyboard
    )
    await callback.answer()

@router.callback_query(F.data.startswith("set_role:"))
async def set_user_role(callback: CallbackQuery, session: AsyncSession):
    """ –ú–µ–Ω—è–µ—Ç —Ä–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ë–î. """
    _, user_id, role = callback.data.split(":")
    user_id = int(user_id)

    success = await update_user_role(session, user_id, role)

    if success:
        await callback.message.answer(f"‚úÖ –†–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –∏–∑–º–µ–Ω–µ–Ω–∞ –Ω–∞ `{role}`.", parse_mode="Markdown")
    else:
        await callback.message.answer("‚ùå –û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –∏–∑–º–µ–Ω–∏—Ç—å —Ä–æ–ª—å.")
    await callback.answer()

@router.callback_query(F.data == "admin_close")
async def close_menu(callback: CallbackQuery):
    """ –ó–∞–∫—Ä—ã–≤–∞–µ—Ç –∞–¥–º–∏–Ω—Å–∫–æ–µ –º–µ–Ω—é. """
    await callback.message.delete()
    await callback.answer()
