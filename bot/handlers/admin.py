import logging

from aiogram import Router, types, F
from aiogram.filters import Command
from aiogram.filters.exception import ExceptionTypeFilter
from aiogram.fsm.context import FSMContext
from aiogram.types import CallbackQuery, Message
from select import select
from sqlalchemy.exc import SQLAlchemyError
from sqlalchemy.ext.asyncio import AsyncSession

from bot.exceptions import InvalidDataError
from bot.fsm.admin import AddRecordStates
from bot.keyboards.admin import admin_menu, record_actions_keyboard, table_actions_keyboard, db_tables_keyboard, \
    cancel_keyboard, db_management_keyboard, back_to_table_keyboard
from bot.keyboards.users import get_user_list_keyboard
from bot.keyboards.roles import get_role_selection_keyboard
from bot.services.auth import get_user_role, update_user_role, get_all_users, is_admin
from bot.services.db_service import DBService
from bot.services.role_service import get_all_roles

logger = logging.getLogger(__name__)
router = Router()

class DBErrorFilter(ExceptionTypeFilter):
    def __init__(self):
        super().__init__(SQLAlchemyError)

    async def __call__(self, exception: Exception) -> bool:
        logger.error(f"Database error: {str(exception)}")
        return True

router.error.filter(DBErrorFilter())

@router.message(Command("admin"))
async def admin_panel(message: types.Message, session: AsyncSession):
    """ –û—Ç–∫—Ä—ã–≤–∞–µ—Ç –ø–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞. """
    role = await get_user_role(session, message.from_user.id)

    if role != "admin":
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å.")
        return

    await message.answer("üîß –ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞", reply_markup=admin_menu())


@router.message(F.text == "üîß –ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞")
async def admin_panel(message: types.Message, session: AsyncSession):
    role = await get_user_role(session, message.from_user.id)

    if role != "admin":
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å.")
        return

    await message.answer("üîß –ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞", reply_markup=admin_menu())

@router.callback_query(F.data == "admin_users")
async def show_users(callback: CallbackQuery, session: AsyncSession):
    """ –û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π. """
    users = await get_all_users(session)

    if not users:
        await callback.message.answer("üì≠ –í –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–∫–∞ –Ω–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.")
        return

    for user in users:
        await callback.message.answer(
            f"üë§ {user.full_name} (ID: {user.telegram_id})\n–†–æ–ª—å: {user.role}",
            reply_markup=get_user_list_keyboard(user.telegram_id)
        )
    await callback.answer()

@router.callback_query(F.data.startswith("change_role:"))
async def ask_for_role_selection(callback: CallbackQuery, session: AsyncSession):
    """ –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –Ω–æ–≤—É—é —Ä–æ–ª—å —É –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞. """
    user_id = int(callback.data.split(":")[1])

    # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —Ä–æ–ª–µ–π –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    roles = await get_all_roles(session)

    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å —Ä–æ–ª—è–º–∏
    role_buttons = [types.InlineKeyboardButton(text=role.name, callback_data=f"set_role:{user_id}:{role.name}") for role in roles]
    keyboard = types.InlineKeyboardMarkup(inline_keyboard=[role_buttons])

    await callback.message.answer(
        f"üîÑ –ù–∞ –∫–∞–∫—É—é —Ä–æ–ª—å –∏–∑–º–µ–Ω–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}?",
        reply_markup=keyboard
    )
    await callback.answer()

@router.callback_query(F.data.startswith("set_role:"))
async def set_user_role(callback: CallbackQuery, session: AsyncSession):
    """ –ú–µ–Ω—è–µ—Ç —Ä–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ë–î. """
    _, user_id, role = callback.data.split(":")
    user_id = int(user_id)

    success = await update_user_role(session, user_id, role)

    if success:
        await callback.message.answer(f"‚úÖ –†–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –∏–∑–º–µ–Ω–µ–Ω–∞ –Ω–∞ `{role}`.", parse_mode="Markdown")
    else:
        await callback.message.answer("‚ùå –û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –∏–∑–º–µ–Ω–∏—Ç—å —Ä–æ–ª—å.")
    await callback.answer()

@router.callback_query(F.data == "admin_close")
async def close_menu(callback: CallbackQuery):
    """ –ó–∞–∫—Ä—ã–≤–∞–µ—Ç –∞–¥–º–∏–Ω—Å–∫–æ–µ –º–µ–Ω—é. """
    await callback.message.delete()
    await callback.answer()


@router.callback_query(F.data == "admin_db")
async def handle_db_management(callback: CallbackQuery):
    """–ú–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ë–î"""
    await callback.message.edit_text(
        "üóÉ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö\n–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∞–±–ª–∏—Ü—É:",
        reply_markup=db_management_keyboard()
    )
    await callback.answer()



@router.callback_query(F.data.startswith("select_table:"))
async def handle_table_selection(callback: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Ç–∞–±–ª–∏—Ü—ã"""
    table_name = callback.data.split(":")[1]
    await callback.message.edit_text(
        f"–¢–∞–±–ª–∏—Ü–∞: {table_name.capitalize()}\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=table_actions_keyboard(table_name)
    )
    await callback.answer()

# @router.callback_query(F.data.startswith("view_records:"))
# async def view_table_records(callback: CallbackQuery, session: AsyncSession):
#     """–ü—Ä–æ—Å–º–æ—Ç—Ä –∑–∞–ø–∏—Å–µ–π —Ç–∞–±–ª–∏—Ü—ã"""
#     table_name = callback.data.split(":")[1]
#     # –ó–¥–µ—Å—å —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∑–∞–ø–∏—Å–µ–π
#     await callback.answer()
#
# @router.callback_query(F.data.startswith("add_record:"))
# async def start_adding_record(callback: CallbackQuery, state: FSMContext):
#     """–ù–∞—á–∞–ª–æ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∑–∞–ø–∏—Å–∏"""
#     table_name = callback.data.split(":")[1]
#     await state.update_data(table_name=table_name)
#     await callback.message.answer(
#         f"–ù–∞—á–∞—Ç–æ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –∑–∞–ø–∏—Å–∏ –≤ —Ç–∞–±–ª–∏—Ü—É {table_name}\n–í–≤–µ–¥–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n"
#         "–ø–æ–ª–µ1=–∑–Ω–∞—á–µ–Ω–∏–µ1\n–ø–æ–ª–µ2=–∑–Ω–∞—á–µ–Ω–∏–µ2\n...",
#         reply_markup=cancel_keyboard()
#     )
#     await callback.answer()

async def ask_for_field(message: Message, state: FSMContext):
    """–ó–∞–ø—Ä–æ—Å–∏—Ç—å —Å–ª–µ–¥—É—é—â–µ–µ –ø–æ–ª–µ"""
    data = await state.get_data()
    current_field = data['required_fields'][data['current_field_index']]

    await message.answer(
        f"–í–≤–µ–¥–∏—Ç–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è –ø–æ–ª—è '{current_field}':",
        reply_markup=cancel_keyboard()
    )
    await state.set_state(AddRecordStates.waiting_field_value)

@router.callback_query(F.data.startswith("db_view:"))
async def handle_view_table(callback: CallbackQuery, session: AsyncSession):
    """–ü—Ä–æ—Å–º–æ—Ç—Ä –∑–∞–ø–∏—Å–µ–π —Ç–∞–±–ª–∏—Ü—ã"""
    if not await is_admin(session, callback.from_user.id):
        await callback.answer("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")
        return

    table_name = callback.data.split(":")[1]
    model = DBService.get_model(table_name)

    if not model:
        await callback.message.answer("–¢–∞–±–ª–∏—Ü–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
        return

    records = await DBService.get_last_records(session, model)

    if not records:
        await callback.message.answer("–í —Ç–∞–±–ª–∏—Ü–µ –Ω–µ—Ç –∑–∞–ø–∏—Å–µ–π")
        return

    for record in records:
        text = "\n".join(f"{key}: {value}" for key, value in record.__dict__.items() if not key.startswith("_"))
        await callback.message.answer(
            text,
            reply_markup=record_actions_keyboard(table_name, record.id)
        )

    await callback.answer()


@router.callback_query(F.data.startswith("view_records:"))
async def view_table_records_handler(callback: CallbackQuery, session: AsyncSession):
    try:
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤
        if not await is_admin(session, callback.from_user.id):
            await callback.answer("‚õî –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")
            return

        table_name = callback.data.split(":")[1]
        logger.info(f"View records requested for table: {table_name}")

        # –ü–æ–ª—É—á–∞–µ–º –º–æ–¥–µ–ª—å –∏ –∑–∞–ø–∏—Å–∏
        model = DBService.get_model(table_name)
        records = await DBService.get_records(session, model, limit=5)

        if not records:
            await callback.message.answer(
                f"üì≠ –¢–∞–±–ª–∏—Ü–∞ '{table_name}' –ø—É—Å—Ç–∞",
                reply_markup=back_to_table_keyboard()
            )
            return

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø–∏—Å–∏ –ø–æ –æ–¥–Ω–æ–π —Å –∫–Ω–æ–ø–∫–∞–º–∏
        for record in records:
            record_text = format_record(record)
            await callback.message.answer(
                record_text,
                reply_markup=record_actions_keyboard(table_name, record.id)
            )

        await callback.message.answer(
            f"üîç –ü–æ–∫–∞–∑–∞–Ω–æ {len(records)} –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –∑–∞–ø–∏—Å–µ–π –∏–∑ '{table_name}'",
            reply_markup=back_to_table_keyboard()
        )

    except ValueError as e:
        logger.error(f"Error: {str(e)}")
        await callback.message.answer(
            f"‚ùå –û—à–∏–±–∫–∞: {str(e)}",
            reply_markup=back_to_table_keyboard()
        )
    finally:
        await callback.answer()

def format_record(record) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –∑–∞–ø–∏—Å—å –ë–î –≤ —á–∏—Ç–∞–µ–º—ã–π —Ç–µ–∫—Å—Ç"""
    fields = []
    for key, value in record.__dict__.items():
        if not key.startswith('_'):
            fields.append(f"<b>{key}:</b> {value}")
    return "\n".join(fields)

@router.callback_query(F.data.startswith("delete:"))
async def handle_delete_record(callback: CallbackQuery, session: AsyncSession):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —É–¥–∞–ª–µ–Ω–∏—è —Å —É–ª—É—á—à–µ–Ω–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫"""
    try:
        _, table_name, record_id = callback.data.split(":")
        record_id = int(record_id)

        model = DBService.get_model(table_name)
        if not model:
            await callback.answer("‚ùå –¢–∞–±–ª–∏—Ü–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
            return

        try:
            success = await DBService.delete_record(session, model, record_id)
            if success:
                await callback.message.answer(
                    f"‚úÖ –ó–∞–ø–∏—Å—å {record_id} —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞ –∏–∑ {table_name}",
                    reply_markup=back_to_table_keyboard()
                )
            else:
                await callback.message.answer(
                    f"‚ùå –ó–∞–ø–∏—Å—å {record_id} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ {table_name}",
                    reply_markup=back_to_table_keyboard()
                )
        except InvalidDataError as e:
            await callback.message.answer(
                f"‚ö†Ô∏è {str(e)}\n–£–¥–∞–ª–∏—Ç–µ —Å–Ω–∞—á–∞–ª–∞ —Å–≤—è–∑–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ.",
                reply_markup=back_to_table_keyboard()
            )

    except ValueError:
        await callback.message.answer(
            "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç ID –∑–∞–ø–∏—Å–∏",
            reply_markup=back_to_table_keyboard()
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ handle_delete: {str(e)}")
        await callback.message.answer(
            "‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞",
            reply_markup=back_to_table_keyboard()
        )
    finally:
        await callback.answer()


@router.callback_query(F.data.startswith("db_add:"))
async def handle_add_record_start(callback: CallbackQuery, state: FSMContext):
    """–ù–∞—á–∞–ª–æ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∑–∞–ø–∏—Å–∏"""
    table_name = callback.data.split(":")[1]
    await state.set_state(AddRecordStates.waiting_for_fields)
    await state.update_data(table_name=table_name)

    model = DBService.get_model(table_name)
    if not model:
        await callback.message.answer("–¢–∞–±–ª–∏—Ü–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
        return

    # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã—Ö –ø–æ–ª–µ–π
    if table_name == "–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏":
        await callback.message.answer("–í–≤–µ–¥–∏—Ç–µ Telegram ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:")

    await callback.answer()


# @router.message(AddRecordStates.waiting_for_fields)
# async def handle_add_record_fields(message: Message, state: FSMContext, session: AsyncSession):
#     """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–ª–µ–π –¥–ª—è –Ω–æ–≤–æ–π –∑–∞–ø–∏—Å–∏"""
#     data = await state.get_data()
#     table_name = data.get("table_name")
#
#     if table_name == "–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏":
#         try:
#             telegram_id = int(message.text)
#             await state.update_data(telegram_id=telegram_id)
#             await message.answer("–í–≤–µ–¥–∏—Ç–µ –ø–æ–ª–Ω–æ–µ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:")
#             # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å —Å–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö
#         except ValueError:
#             await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ–≤–æ–π Telegram ID")
#             return


# @router.message(AddRecordStates.waiting_field_value)
# async def handle_field_value(message: Message, state: FSMContext, session: AsyncSession):
#     """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–µ–¥–µ–Ω–Ω–æ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ–ª—è"""
#     data = await state.get_data()
#     current_field = data['required_fields'][data['current_field_index']]
#
#     # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ–ª—è
#     record_data = data['record_data']
#     record_data[current_field] = message.text
#
#     # –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω–¥–µ–∫—Å —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—è
#     current_field_index = data['current_field_index'] + 1
#     await state.update_data(
#         record_data=record_data,
#         current_field_index=current_field_index
#     )
#
#     # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –µ—â–µ –ø–æ–ª—è –¥–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è
#     if current_field_index < len(data['required_fields']):
#         await ask_for_field(message, state)
#     else:
#         await finish_adding(message, state, session)


async def finish_adding(message: Message, state: FSMContext, session: AsyncSession):
    """–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –ø—Ä–æ—Ü–µ—Å—Å–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è"""
    data = await state.get_data()
    try:
        record = data['model'](**data['record_data'])
        session.add(record)
        await session.commit()

        await message.answer(
            f"‚úÖ –ó–∞–ø–∏—Å—å —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ —Ç–∞–±–ª–∏—Ü—É '{data['table_name']}'",
            reply_markup=admin_menu()
        )
    except Exception as e:
        await message.answer(
            f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∑–∞–ø–∏—Å–∏: {str(e)}",
            reply_markup=admin_menu()
        )
    finally:
        await state.clear()


@router.callback_query(F.data.startswith("view_structure:"))
async def view_table_structure(callback: CallbackQuery):
    """–ü—Ä–æ—Å–º–æ—Ç—Ä —Å—Ç—Ä—É–∫—Ç—É—Ä—ã —Ç–∞–±–ª–∏—Ü—ã"""
    table_name = callback.data.split(":")[1]
    model = DBService.get_model(table_name)
    fields = DBService.get_model_fields(model)

    text = f"–°—Ç—Ä—É–∫—Ç—É—Ä–∞ —Ç–∞–±–ª–∏—Ü—ã {table_name}:\n\n"
    for field, props in fields.items():
        text += f"{field}: {props['type']} "
        text += "(–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ–µ)" if not props['nullable'] else "(–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–µ)"
        text += "\n"

    await callback.message.answer(text)
    await callback.answer()

@router.callback_query(F.data == "test_db")
async def test_db_handler(callback: CallbackQuery, session: AsyncSession):
    try:
        from bot.models import User
        test_records = await session.execute(select(User).limit(5))
        count = len(test_records.scalars().all())
        await callback.answer(f"–¢–µ—Å—Ç –ë–î: –Ω–∞–π–¥–µ–Ω–æ {count} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
    except Exception as e:
        logger.error(f"Test DB error: {str(e)}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∞ –ë–î")