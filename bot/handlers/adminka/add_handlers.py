import logging

from aiogram import Router, F
from aiogram.fsm.context import FSMContext
from aiogram.types import Message, CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.utils.keyboard import InlineKeyboardBuilder
from sqlalchemy.ext.asyncio import AsyncSession
from sqlalchemy.orm import RelationshipProperty

from bot.exceptions import InvalidDataError
from bot.fsm.admin import AddRecordStates
from bot.keyboards.admin import cancel_keyboard, back_to_table_keyboard
from bot.services.db_service import DBService
from bot.services.validation import DataValidator

logger = logging.getLogger(__name__)
router = Router()


class AddHandler:
    def __init__(self, table_name: str, session: AsyncSession):
        self.table_name = table_name
        self.session = session
        self.model = DBService.get_model(table_name)
        self.fields = DBService.get_model_fields(self.model)
        self.current_field = None
        self.data = {}
        self.required_fields = self._get_required_fields()

    def _get_required_fields(self):
        """–ü–æ–ª—É—á–∞–µ—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è, –≤–∫–ª—é—á–∞—è –ø—Ä–æ–≤–µ—Ä–∫—É FK"""
        required = []
        for name, props in self.fields.items():
            # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º ID –∏ nullable –ø–æ–ª—è
            if name == 'id' or props['nullable']:
                continue

            # –í–∫–ª—é—á–∞–µ–º –ø–æ–ª—è –±–µ–∑ –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
            if props['default'] is None:
                required.append(name)

            # –û—Å–æ–±–æ –ø—Ä–æ–≤–µ—Ä—è–µ–º ForeignKey - –æ–Ω–∏ –º–æ–≥—É—Ç –±—ã—Ç—å nullable=False
            # –Ω–æ –Ω–µ –æ—Ç–º–µ—á–µ–Ω—ã –∫–∞–∫ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø—Ä–∏ –∏–Ω—Å–ø–µ–∫—Ü–∏–∏
            if props.get('foreign_key') and name not in required:
                required.append(name)

        return required

    async def start(self, message: Message, state: FSMContext):
        """–ù–∞—á–∞–ª–æ –ø—Ä–æ—Ü–µ—Å—Å–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è"""
        await state.set_state(AddRecordStates.waiting_for_fields)
        await state.update_data(handler=self)
        self.current_field = self.required_fields[0]
        await self._ask_for_field(message)

    async def _ask_for_field(self, message: Message):
        """–ó–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ–ª—è –∏–ª–∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≤–∞—Ä–∏–∞–Ω—Ç—ã –¥–ª—è FK"""
        field_props = self.fields[self.current_field]

        # –ï—Å–ª–∏ —ç—Ç–æ –≤–Ω–µ—à–Ω–∏–π –∫–ª—é—á - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≤–∞—Ä–∏–∞–Ω—Ç—ã
        if field_props.get('foreign_key'):
            await self._show_fk_options(message)
        else:
            await message.answer(
                f"–í–≤–µ–¥–∏—Ç–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è –ø–æ–ª—è '{self.current_field}' ({field_props['type']}):",
                reply_markup=cancel_keyboard()
            )

    async def _show_fk_options(self, message: Message):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≤–∞—Ä–∏–∞–Ω—Ç—ã –¥–ª—è –ø–æ–ª—è –≤–Ω–µ—à–Ω–µ–≥–æ –∫–ª—é—á–∞"""
        related_model = self._get_related_model(self.current_field)
        try:
            options = await DBService.get_all_records(self.session, related_model)

            if not options:
                await message.answer(
                    f"–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –¥–ª—è {self.current_field}",
                    reply_markup=cancel_keyboard()
                )
                return

            keyboard = self._build_fk_keyboard(options)
            await message.answer(
                f"–í—ã–±–µ—Ä–∏—Ç–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è {self.current_field}:",
                reply_markup=keyboard
            )
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ FK: {str(e)}")
            await message.answer(
                "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤",
                reply_markup=cancel_keyboard()
            )

    def _get_related_model(self, field_name: str):
        """–ü–æ–ª—É—á–∞–µ—Ç –º–æ–¥–µ–ª—å —Å–≤—è–∑–∞–Ω–Ω–æ–π —Ç–∞–±–ª–∏—Ü—ã"""
        rel: RelationshipProperty = getattr(self.model, field_name).property
        return rel.mapper.class_

    def _build_fk_keyboard(self, options):
        """–°—Ç—Ä–æ–∏—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –≤–∞—Ä–∏–∞–Ω—Ç–∞–º–∏ FK"""
        builder = InlineKeyboardBuilder()
        for option in options:
            builder.button(
                text=f"{option.id}: {getattr(option, 'name', str(option.id))}",
                callback_data=f"fk_select:{option.id}"
            )
        builder.button(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_add_record")
        builder.adjust(1)
        return builder.as_markup()

    async def handle_field_input(self, message: Message, state: FSMContext):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –∑–Ω–∞—á–µ–Ω–∏—è –æ–±—ã—á–Ω–æ–≥–æ –ø–æ–ª—è"""
        try:
            field_props = self.fields[self.current_field]
            validated_value = DataValidator.validate_field(
                self.current_field,
                field_props['type'],
                message.text
            )
            self.data[self.current_field] = validated_value
            await self._move_to_next_field(state, message)

        except ValueError as e:
            await message.answer(f"–û—à–∏–±–∫–∞: {str(e)}\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:")

    async def handle_fk_selection(self, value: int, state: FSMContext, message: Message):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –∑–Ω–∞—á–µ–Ω–∏—è FK"""
        self.data[self.current_field] = value
        await self._move_to_next_field(state, message)

    async def _move_to_next_field(self, state: FSMContext, message: Message):
        """–ü–µ—Ä–µ—Ö–æ–¥ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –ø–æ–ª—é –∏–ª–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ"""
        current_idx = self.required_fields.index(self.current_field)
        if current_idx + 1 < len(self.required_fields):
            self.current_field = self.required_fields[current_idx + 1]
            await state.update_data(handler=self)
            await self._ask_for_field(message)
        else:
            await self._finish_adding(message, state)

    async def _finish_adding(self, message: Message, state: FSMContext):
        """–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—é –ø—Ä–æ—Ü–µ—Å—Å–∞"""
        await message.answer(
            "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –≤–≤–µ–¥–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ:\n" +
            "\n".join(f"{k}: {v}" for k, v in self.data.items()),
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[[
                InlineKeyboardButton(text="‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data="confirm_add_record"),
                InlineKeyboardButton(text="üîÑ –ù–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ", callback_data=f"add_record:{self.table_name}")
            ]])
        )

    async def commit_record(self) -> int:
        """–ì–∞—Ä–∞–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∑–∞–ø–∏—Å–∏"""
        try:
            record = await DBService.add_record(self.session, self.model, self.data)
            return record.id
        except InvalidDataError as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏: {str(e)}")
            raise
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è: {str(e)}")
            raise InvalidDataError("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –∑–∞–ø–∏—Å—å")


@router.callback_query(F.data.startswith("add_record:"))
async def start_add_record(callback: CallbackQuery, state: FSMContext, session: AsyncSession):
    """–ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π –∑–∞–ø—É—Å–∫ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è"""
    try:
        table_name = callback.data.split(":")[1]
        handler = AddHandler(table_name, session)
        await handler.start(callback.message, state)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è: {str(e)}")
        await callback.message.answer(
            "–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –ø—Ä–æ—Ü–µ—Å—Å–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è",
            reply_markup=back_to_table_keyboard()
        )
    finally:
        await callback.answer()


@router.message(AddRecordStates.waiting_for_fields)
async def handle_field_input(message: Message, state: FSMContext, session: AsyncSession):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ–ª—è"""
    data = await state.get_data()
    handler: AddHandler = data.get('handler')
    if handler:
        await handler.handle_field_input(message, state)


@router.callback_query(F.data.startswith("fk_select:"))
async def handle_fk_selection(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –∑–Ω–∞—á–µ–Ω–∏—è FK"""
    _, value = callback.data.split(":")
    data = await state.get_data()
    handler: AddHandler = data.get('handler')
    if handler:
        await handler.handle_fk_selection(int(value), state, callback.message)
    await callback.answer()


@router.callback_query(F.data == "confirm_add_record")
async def handle_confirm_add(callback: CallbackQuery, state: FSMContext):
    """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∑–∞–ø–∏—Å–∏"""
    data = await state.get_data()
    handler: AddHandler = data.get('handler')

    if not handler:
        await callback.answer("–û—à–∏–±–∫–∞: –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return

    try:
        record_id = await handler.commit_record()
        await callback.message.answer(
            f"‚úÖ –ó–∞–ø–∏—Å—å —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞ (ID: {record_id})",
            reply_markup=back_to_table_keyboard()
        )
    except InvalidDataError as e:
        await callback.message.answer(
            f"‚ùå –û—à–∏–±–∫–∞: {str(e)}",
            reply_markup=back_to_table_keyboard()
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∑–∞–ø–∏—Å–∏: {str(e)}", exc_info=True)
        await callback.message.answer(
            "‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞",
            reply_markup=back_to_table_keyboard()
        )
    finally:
        await state.clear()
    await callback.answer()
