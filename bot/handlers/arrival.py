from aiogram import Router, F
from aiogram.fsm.context import FSMContext
from aiogram.types import Message, CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton
from sqlalchemy.ext.asyncio import AsyncSession

from bot.fsm.arrival import ArrivalState
from bot.keyboards.arrival import (
    arrival_types_keyboard, confirm_arrival_keyboard, arrival_main_keyboard, arrival_types_keyboard_for_edit
)
from bot.models.database import async_session
from bot.services.arrival import (
    get_arrivals_for_month, add_arrival, update_arrival_amount, get_arrival_by_id
)
from bot.services.storage import update_stock_arrival, get_raw_material_storage, \
    get_raw_type_at_raw_product_id
from bot.services.user_service import get_user
from bot.services.wrapers import restrict_anonymous, staff_required

router = Router()


@router.message(F.text == "–ü—Ä–∏—Ö–æ–¥—ã")
@restrict_anonymous
async def show_arrival_menu(message: Message):
    """–ü–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é –ø—Ä–∏—Ö–æ–¥–æ–≤."""
    async with async_session() as session:
        user = await get_user(session, message.from_user.id)
        if not user:
            await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —Ñ—É–Ω–∫—Ü–∏–∏ '–ü—Ä–∏—Ö–æ–¥—ã'.")
            return
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=arrival_main_keyboard(user.role))


@router.callback_query(F.data == "add_arrival")
@restrict_anonymous
async def add_arrival_handler(callback: CallbackQuery, state: FSMContext, session: AsyncSession):
    """–ù–∞—á–∞—Ç—å –ø—Ä–æ—Ü–µ—Å—Å –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø—Ä–∏—Ö–æ–¥–∞."""
    keyboard = await arrival_types_keyboard(session)
    await callback.message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –ø—Ä–æ–¥—É–∫—Ü–∏–∏:", reply_markup=keyboard)
    await state.set_state(ArrivalState.type)


@router.callback_query(F.data.startswith("arrival_type:"))
async def set_arrival_type(callback: CallbackQuery, state: FSMContext):
    """–£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ç–∏–ø–∞ –ø—Ä–æ–¥—É–∫—Ü–∏–∏."""
    product_type = callback.data.split(":")[1]
    await state.update_data(type=product_type)
    await callback.message.edit_text(f"–í—ã –≤—ã–±—Ä–∞–ª–∏: {product_type}\n–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ (–∫–≥):")
    await state.set_state(ArrivalState.amount)


@router.message(ArrivalState.amount, F.text.isdigit())
async def set_arrival_amount(message: Message, state: FSMContext):
    """–ó–∞–ø–∏—Å—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –ø—Ä–æ–¥—É–∫—Ü–∏–∏."""
    amount = int(message.text)
    if amount <= 0:
        await message.answer("–û—à–∏–±–∫–∞: –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –±–æ–ª—å—à–µ 0.")
        return

    await state.update_data(amount=amount)
    data = await state.get_data()
    text = f"""
    üìå –ù–æ–≤—ã–π –ø—Ä–∏—Ö–æ–¥:
    üè∑Ô∏è –¢–∏–ø: {data['type']}
    üì¶ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: {data['amount']} –∫–≥    
    """
    await message.answer(text, reply_markup=confirm_arrival_keyboard())
    await state.set_state(ArrivalState.confirm)


@router.callback_query(F.data == "arrival_confirm")
async def confirm_arrival(callback: CallbackQuery, state: FSMContext, session: AsyncSession):
    """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø—Ä–∏—Ö–æ–¥–∞."""
    data = await state.get_data()

    await add_arrival(session, callback.from_user.id, data["type"], data["amount"])
    # async with session.begin():  # –ê—Ç–æ–º–∞—Ä–Ω–∞—è –æ–ø–µ—Ä–∞—Ü–∏—è
    #     arrival = Arrival(
    #         type=data["type"],
    #         amount=data["amount"],
    #         user_id=callback.from_user.id,
    #         date=datetime.utcnow(),
    #     )
    #     session.add(arrival)
    #
    #     # –í—ã–∑–æ–≤ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–∫–ª–∞–¥–∞ —Å –ø–µ—Ä–µ–¥–∞—á–µ–π –≤—Å–µ—Ö –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤
    #     await update_stock_arrival(session, data["type"], data["amount"])

    await callback.message.edit_text("‚úÖ –ü—Ä–∏—Ö–æ–¥ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω!")
    await state.clear()


@router.callback_query(F.data == "arrival_cancel")
async def cancel_arrival(callback: CallbackQuery, state: FSMContext):
    """–û—Ç–º–µ–Ω–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø—Ä–∏—Ö–æ–¥–∞."""
    await callback.message.edit_text("‚ùå –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–∏—Ö–æ–¥–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ.")
    await state.clear()


@router.callback_query(F.data == "view_arrivals")
@staff_required
async def view_arrivals_handler(callback: CallbackQuery, session: AsyncSession):
    """–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø—Ä–∏—Ö–æ–¥–æ–≤ –∑–∞ –º–µ—Å—è—Ü."""
    arrivals = await get_arrivals_for_month(session, callback.from_user.id)

    if not arrivals:
        await callback.message.answer("–ü—Ä–∏—Ö–æ–¥—ã –∑–∞ —ç—Ç–æ—Ç –º–µ—Å—è—Ü –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç.")
        await callback.answer()
        return

    for arrival in arrivals:
        keyboard = InlineKeyboardMarkup(
            inline_keyboard=[
                [InlineKeyboardButton(text="üóë –£–¥–∞–ª–∏—Ç—å", callback_data=f"delete_arrival:{arrival.id}")],
                [InlineKeyboardButton(text="‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å", callback_data=f"edit_arrival:{arrival.id}")]
            ]
        )
        await callback.message.answer(
            f"üìÖ –ü—Ä–∏—Ö–æ–¥ –æ—Ç {arrival.date.strftime('%Y-%m-%d %H:%M:%S')}\n"
            f"üì¶ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: {arrival.amount} –∫–≥",
            reply_markup=keyboard
        )
    await callback.answer()


@router.callback_query(F.data.startswith("delete_arrival:"))
@staff_required
async def delete_arrival_handler(callback: CallbackQuery, session: AsyncSession):
    """–£–¥–∞–ª–µ–Ω–∏–µ –ø—Ä–∏—Ö–æ–¥–∞ –∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–∫–ª–∞–¥–∞."""
    arrival_id = int(callback.data.split(":")[1])
    arival = await get_arrival_by_id(session, arrival_id)
    raw_storage = await  get_raw_material_storage(session, arrival_id)
    raw_type = await get_raw_type_at_raw_product_id(session, raw_storage.raw_product_id)
    delta = 0 - arival.amount
    await  update_stock_arrival(session, raw_type, delta)
    await session.delete(arival)
    await session.commit()

    await callback.message.answer(f"‚úÖ –ü—Ä–∏—Ö–æ–¥ {arrival_id} —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª—ë–Ω!")
    await callback.answer()


@router.callback_query(F.data.startswith("edit_arrival:"))
@staff_required
async def edit_arrival_handler(callback: CallbackQuery, state: FSMContext):
    """–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –ø—Ä–∏—Ö–æ–¥–∞."""
    arrival_id = int(callback.data.split(":")[1])
    print(f'{arrival_id=}')
    await state.update_data(arrival_id=arrival_id)
    await callback.message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ (–∫–≥):")
    await state.set_state(ArrivalState.amount_edit)


@router.message(ArrivalState.amount_edit, F.text.isdigit())
async def set_arrival_amount_edit_handler(message: Message, state: FSMContext, session: AsyncSession):
    """–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–∏–ø–∞ —Ä–æ–¥—É–∫—Ü–∏–∏ –ø—Ä–∏—Ö–æ–¥–∞"""
    new_amount = int(message.text)
    if new_amount <= 0:
        await message.answer("–û—à–∏–±–∫–∞: –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –±–æ–ª—å—à–µ 0.")
        return

    await state.update_data(arrival_amount=new_amount)

    keyboard = await arrival_types_keyboard_for_edit(session)
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –ø—Ä–æ–¥—É–∫—Ü–∏–∏:", reply_markup=keyboard)
    await state.set_state(ArrivalState.type_edit)


@router.callback_query(ArrivalState.type_edit, F.data.startswith("arrival_type_edit:"))
async def set_arrival_type_edit_handler(callback: CallbackQuery, state: FSMContext, session: AsyncSession):
    """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –ø—Ä–∏—Ö–æ–¥–∞ –∏ —Å–∫–ª–∞–¥–∞."""
    arrival_type = callback.data.split(":")[1]

    data = await state.get_data()
    arrival_id = data['arrival_id']
    arrival_amount = data['arrival_amount']

    await update_arrival_amount(session, arrival_id, arrival_amount, arrival_type)

    await callback.message.answer(
        f"‚úÖ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–∏—Ö–æ–¥–∞ {arrival_type} ID={arrival_id} –∏–∑–º–µ–Ω–µ–Ω–æ –Ω–∞ {arrival_amount} –∫–≥.")
    await state.clear()
