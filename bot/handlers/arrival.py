from aiogram import Router, F
from aiogram.types import Message, CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.fsm.context import FSMContext
from select import select
from sqlalchemy.ext.asyncio import AsyncSession
from datetime import datetime

from sqlalchemy.orm import session

from bot.keyboards.arrival import arrival_types_keyboard, confirm_arrival_keyboard, arrival_main_keyboard
from bot.models.arrival import Arrival
from bot.fsm.arrival import ArrivalState
from bot.models.database import async_session
from bot.services.arrival import process_arrival, get_arrivals_for_month, delete_arrival, update_arrival_amount
from bot.services.user_service import get_user

router = Router()

@router.message(F.text == "–ü—Ä–∏—Ö–æ–¥—ã")
async def show_arrival_menu(message: Message):
    """–ü–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é —Å –≤—ã–±–æ—Ä–æ–º –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –ø—Ä–∏—Ö–æ–¥–∞–º–∏"""
    async with async_session() as session:
        user = await get_user(session, message.from_user.id)

        if not user:
            await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —Ñ—É–Ω–∫—Ü–∏–∏ '–ü—Ä–∏—Ö–æ–¥—ã'.")
            return
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=arrival_main_keyboard(user.role))

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø—Ä–∏—Ö–æ–¥–∞
@router.callback_query(F.data == "add_arrival")
async def add_arrival_handler(callback: CallbackQuery, session: AsyncSession, state: FSMContext):
    """–ù–∞—á–∞—Ç—å –ø—Ä–æ—Ü–µ—Å—Å –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø—Ä–∏—Ö–æ–¥–∞"""
    await callback.message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –ø—Ä–æ–¥—É–∫—Ü–∏–∏:", reply_markup=arrival_types_keyboard())
    await state.set_state(ArrivalState.type)

@router.callback_query(F.data.startswith("arrival_type:"))
async def set_arrival_type(callback: CallbackQuery, state: FSMContext):
    product_type = callback.data.split(":")[1]
    await state.update_data(type=product_type)
    await callback.message.edit_text(f"–í—ã –≤—ã–±—Ä–∞–ª–∏: {product_type}\n–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ (–∫–≥):")
    await state.set_state(ArrivalState.amount)

@router.message(ArrivalState.amount, F.text.isdigit())
async def set_arrival_amount(message: Message, state: FSMContext):
    amount = int(message.text)
    if amount <= 0:
        await message.answer("–û—à–∏–±–∫–∞: –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –±–æ–ª—å—à–µ 0.")
        return

    await state.update_data(amount=amount)
    data = await state.get_data()
    text = f"""
    üìå –ù–æ–≤—ã–π –ø—Ä–∏—Ö–æ–¥:
    üè∑Ô∏è –¢–∏–ø: {data['type']}
    üì¶ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: {data['amount']} –∫–≥    
    """
    await message.answer(text, reply_markup=confirm_arrival_keyboard())
    await state.set_state(ArrivalState.confirm)


@router.callback_query(F.data == "arrival_confirm")
async def confirm_arrival(callback: CallbackQuery, state: FSMContext, session: AsyncSession):
    data = await state.get_data()
    arrival = Arrival(
        type=data["type"],
        amount=data["amount"],
        user_id=callback.from_user.id,
        date=datetime.utcnow(),
    )
    session.add(arrival)
    await session.commit()

    await callback.message.edit_text("‚úÖ –ü—Ä–∏—Ö–æ–¥ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω!")
    await state.clear()

@router.callback_query(F.data == "arrival_cancel")
async def cancel_arrival(callback: CallbackQuery, state: FSMContext):
    await callback.message.edit_text("‚ùå –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–∏—Ö–æ–¥–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ.")
    await state.clear()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –ø—Ä–∏—Ö–æ–¥–∞
@router.callback_query(F.data.startswith("edit_arrival:"))
async def edit_arrival_handler(callback: CallbackQuery, state: FSMContext):
    """–ó–∞–ø—Ä–æ—Å –Ω–æ–≤–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–∏—Ö–æ–¥–∞"""
    arrival_id = int(callback.data.split(":")[1])
    await state.update_data(arrival_id=arrival_id)
    await callback.message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ (–∫–≥):")
    await state.set_state(ArrivalState.amount_edit)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø—Ä–∏—Ö–æ–¥–æ–≤ –∑–∞ –º–µ—Å—è—Ü
@router.callback_query(F.data == "view_arrivals")
async def view_arrivals_handler(callback: CallbackQuery, session: AsyncSession):
    """–ü–æ–∫–∞–∑–∞—Ç—å –ø—Ä–∏—Ö–æ–¥ –∑–∞ –º–µ—Å—è—Ü —Å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å—é —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏ —É–¥–∞–ª–µ–Ω–∏—è"""
    arrivals = await get_arrivals_for_month(session, callback.from_user.id)

    if not arrivals:
        await callback.message.answer("–ü—Ä–∏—Ö–æ–¥—ã –∑–∞ —ç—Ç–æ—Ç –º–µ—Å—è—Ü –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç.")
        await callback.answer()
        return

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –ø—Ä–∏—Ö–æ–¥–æ–≤
    for arrival in arrivals:
        keyboard = InlineKeyboardMarkup(
            inline_keyboard=[
                [InlineKeyboardButton(text="üóë –£–¥–∞–ª–∏—Ç—å", callback_data=f"delete_arrival:{arrival.id}")],
                [InlineKeyboardButton(text="‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å", callback_data=f"edit_arrival:{arrival.id}")]
            ]
        )
        await callback.message.answer(
            f"üìÖ –ü—Ä–∏—Ö–æ–¥ –æ—Ç {arrival.date.strftime('%Y-%m-%d %H:%M:%S')}\n"
            f"üì¶ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: {arrival.amount} –∫–≥",
            reply_markup=keyboard
        )
    await callback.answer()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –ø—Ä–∏—Ö–æ–¥–∞
@router.callback_query(F.data.startswith("delete_arrival:"))
async def delete_arrival_handler(callback: CallbackQuery, session: AsyncSession):
    """–£–¥–∞–ª–µ–Ω–∏–µ –∑–∞–ø–∏—Å–∏ –æ –ø—Ä–∏—Ö–æ–¥–µ"""
    arrival_id = int(callback.data.split(":")[1])
    arrival = await delete_arrival(session, arrival_id)

    if arrival:
        await callback.message.answer(f"‚úÖ –ü—Ä–∏—Ö–æ–¥ {arrival.id} —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª—ë–Ω!")
    else:
        await callback.message.answer("‚ùå –ü—Ä–∏—Ö–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω.")
    await callback.answer()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –ø—Ä–∏—Ö–æ–¥–∞
@router.message(ArrivalState.amount_edit, F.text.isdigit())
async def set_arrival_amount_edit_handler(message: Message, state: FSMContext, session: AsyncSession):
    """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –ø—Ä–æ–¥—É–∫—Ü–∏–∏ –≤ –ø—Ä–∏—Ö–æ–¥–µ"""
    new_amount = int(message.text)
    if new_amount <= 0:
        await message.answer("–û—à–∏–±–∫–∞: –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –±–æ–ª—å—à–µ 0.")
        return

    data = await state.get_data()
    arrival_id = data['arrival_id']

    # –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
    arrival = await update_arrival_amount(session, arrival_id, new_amount)

    if arrival:
        await message.answer(f"‚úÖ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–∏—Ö–æ–¥–∞ {arrival.id} –∏–∑–º–µ–Ω–µ–Ω–æ –Ω–∞ {new_amount} –∫–≥.")
    else:
        await message.answer("‚ùå –ü—Ä–∏—Ö–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω.")
    await state.clear()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∑–∞–∫—Ä—ã—Ç–∏—è –º–µ–Ω—é
@router.callback_query(F.data == "close_menu")
async def close_menu_handler(callback: CallbackQuery):
    """–ó–∞–∫—Ä—ã—Ç–∏–µ –º–µ–Ω—é"""
    await callback.message.delete()
    await callback.answer()