from aiogram import Router, F, types
from aiogram.fsm.context import FSMContext
from aiogram.types import CallbackQuery
from sqlalchemy.ext.asyncio import AsyncSession

from bot.fsm.expense import ExpenseStates
from bot.keyboards.expense import expense_main_keyboard, expense_source_keyboard, expense_actions_keyboard
from bot.services.expense import add_expense, get_expenses, update_expense, change_expense_source, delete_expense
from bot.services.user_service import get_user
from bot.services.wrapers import staff_required

router = Router()


@router.message(F.text == "üí∏ –†–∞—Å—Ö–æ–¥—ã")
@staff_required
async def show_expense_menu(message: types.Message):
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=expense_main_keyboard())


@router.callback_query(F.data == "add_expense")
@staff_required
async def start_adding_expense(callback: CallbackQuery, state: FSMContext):
    await state.set_state(ExpenseStates.waiting_for_amount)
    await callback.message.answer("–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É —Ä–∞—Å—Ö–æ–¥–∞:")
    await callback.answer()


@router.message(ExpenseStates.waiting_for_amount)
@staff_required
async def process_expense_amount(message: types.Message, state: FSMContext):
    await state.update_data(amount=int(message.text))
    await state.set_state(ExpenseStates.waiting_for_purpose)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–µ —Ä–∞—Å—Ö–æ–¥–∞:")


@router.message(ExpenseStates.waiting_for_purpose)
@staff_required
async def process_expense_purpose(message: types.Message, state: FSMContext):
    await state.update_data(purpose=message.text)
    await state.set_state(ExpenseStates.waiting_for_source)
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –∏—Å—Ç–æ—á–Ω–∏–∫ —Ä–∞—Å—Ö–æ–¥–æ–≤:", reply_markup=expense_source_keyboard())


@router.callback_query(F.data.startswith("expense_source_"))
@staff_required
async def process_expense_source(callback: CallbackQuery, state: FSMContext, session: AsyncSession):
    data = await state.get_data()
    source = "—Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã–µ —Å—Ä–µ–¥—Å—Ç–≤–∞" if callback.data == "expense_source_own" else "–∫–∞—Å—Å–∞"
    user = await get_user(session, callback.from_user.id)
    await add_expense(session, user.id, data["amount"], data["purpose"], source)
    await state.clear()
    await callback.message.answer("–†–∞—Å—Ö–æ–¥ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω.")
    await callback.answer()


@router.callback_query(F.data == "view_expenses")
@staff_required
async def show_expenses(callback: CallbackQuery, session: AsyncSession):
    user = await get_user(session, callback.from_user.id)
    expenses = await get_expenses(session, user.id)

    if not expenses:
        await callback.message.answer("–£ –≤–∞—Å –Ω–µ—Ç —Ä–∞—Å—Ö–æ–¥–æ–≤ –∏–∑ —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã—Ö —Å—Ä–µ–¥—Å—Ç–≤.")
        return

    for expense in expenses:
        text = f"üìÖ {expense.date.strftime('%d.%m.%Y')}\nüí∞ {expense.amount} —Ä—É–±.\nüìù {expense.purpose}"
        await callback.message.answer(text, reply_markup=expense_actions_keyboard(expense.id))

    await callback.answer()


@router.callback_query(F.data.startswith("edit_expense_"))
@staff_required
async def start_editing_expense(callback: CallbackQuery, state: FSMContext):
    expense_id = int(callback.data.split("_")[-1])
    await state.update_data(expense_id=expense_id)
    await state.set_state(ExpenseStates.waiting_for_new_amount)
    await callback.message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é —Å—É–º–º—É —Ä–∞—Å—Ö–æ–¥–∞:")


@router.message(ExpenseStates.waiting_for_new_amount)
@staff_required
async def process_new_expense_amount(message: types.Message, state: FSMContext):
    await state.update_data(amount=int(message.text))
    await state.set_state(ExpenseStates.waiting_for_new_purpose)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–µ —Ä–∞—Å—Ö–æ–¥–∞:")


@router.message(ExpenseStates.waiting_for_new_purpose)
@staff_required
async def process_new_expense_purpose(message: types.Message, state: FSMContext, session: AsyncSession):
    await state.update_data(purpose=message.text)
    data = await state.get_data()
    print("FSM Data before update_expense:", data)
    await update_expense(session, data["expense_id"], data["amount"], data["purpose"])
    await state.clear()
    await message.answer("–†–∞—Å—Ö–æ–¥ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω.")


@router.callback_query(F.data.startswith("delete_expense_"))
@staff_required
async def delete_expense_handler(callback: CallbackQuery, session: AsyncSession):
    expense_id = int(callback.data.split("_")[-1])
    await delete_expense(session, expense_id)
    await callback.message.answer("–†–∞—Å—Ö–æ–¥ —É–¥–∞–ª–µ–Ω.")

@router.callback_query(F.data.startswith("change_source_"))
@staff_required
async def change_expense_source_handler(callback: CallbackQuery, session: AsyncSession):
    expense_id = int(callback.data.split("_")[-1])
    await change_expense_source(session, expense_id)
    await callback.message.answer("–ò—Å—Ç–æ—á–Ω–∏–∫ —Ä–∞—Å—Ö–æ–¥–∞ –∏–∑–º–µ–Ω–µ–Ω –Ω–∞ '–∫–∞—Å—Å–∞'.")
    await callback.answer()

@router.callback_query(F.data == "close_expense_menu")
@staff_required
async def close_expense_menu(callback: CallbackQuery):
    await callback.message.delete()
    await callback.answer()
