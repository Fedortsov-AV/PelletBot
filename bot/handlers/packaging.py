from aiogram import Router, F
from aiogram.fsm.context import FSMContext
from aiogram.types import Message, CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton
from sqlalchemy.ext.asyncio import AsyncSession

from bot.fsm.packaging import PackagingStates
from bot.keyboards.packaging import packaging_main_keyboard, raw_materials_keyboard
from bot.models import Product
from bot.services.packaging_service import calculate_packaging_ratio, get_raw_materials, \
    get_products_for_raw_material, save_packaging, update_stock_after_packaging, get_raw_material_availability
from bot.services.user_service import get_user
from bot.services.wrapers import restrict_anonymous

router = Router()


@router.message(F.text == "üì¶ –§–∞—Å–æ–≤–∫–∞")
@restrict_anonymous
async def show_packaging_menu(message: Message, session: AsyncSession):
    """–û—Ç–∫—Ä—ã–≤–∞–µ—Ç –º–µ–Ω—é —Ñ–∞—Å–æ–≤–∫–∏"""
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=packaging_main_keyboard())


@router.callback_query(F.data == "packaging_proportion")
@restrict_anonymous
async def start_packaging_proportion(
        callback: CallbackQuery,
        session: AsyncSession,
        state: FSMContext
):
    """–ù–∞—á–∞–ª–æ –ø—Ä–æ—Ü–µ—Å—Å–∞ —Ä–∞—Å—á–µ—Ç–∞ –ø—Ä–æ–ø–æ—Ä—Ü–∏–∏ - –≤—ã–±–æ—Ä —Å—ã—Ä—å—è"""
    keyboard = await raw_materials_keyboard(session)
    await callback.message.answer(
        "–í—ã–±–µ—Ä–∏—Ç–µ —Å—ã—Ä—å–µ –¥–ª—è —Ñ–∞—Å–æ–≤–∫–∏:",
        reply_markup=keyboard
    )
    await state.set_state(PackagingStates.waiting_for_raw_material)


@router.callback_query(
    PackagingStates.waiting_for_raw_material,
    F.data.startswith("select_raw_")
)
@restrict_anonymous
async def select_raw_material(
        callback: CallbackQuery,
        session: AsyncSession,
        state: FSMContext
):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Å—ã—Ä—å—è –∏ –∑–∞–ø—Ä–æ—Å –ø—Ä–æ–ø–æ—Ä—Ü–∏–∏"""
    raw_product_id = int(callback.data.split("_")[-1])

    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å—ã—Ä—å–µ
    raw_materials = await get_raw_materials(session)
    raw_product = next((rp for rp, amt in raw_materials if rp.id == raw_product_id), None)

    if not raw_product:
        await callback.message.answer("–°—ã—Ä—å–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ!")
        await state.clear()
        return

    # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–æ–¥—É–∫—Ç—ã –∏–∑ —ç—Ç–æ–≥–æ —Å—ã—Ä—å—è
    products = await get_products_for_raw_material(session, raw_product_id)
    if len(products) != 2:
        await callback.message.answer(
            "–î–ª—è –¥–∞–Ω–Ω–æ–≥–æ —Å—ã—Ä—å—è –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —Ä–æ–≤–Ω–æ 2 –≤–∏–¥–∞ –ø—Ä–æ–¥—É–∫—Ü–∏–∏!"
        )
        await state.clear()
        return

    product_names = [p.name for p, _ in products]

    await state.update_data(
        raw_product_id=raw_product_id,
        product_names=product_names
    )
    await state.set_state(PackagingStates.waiting_for_ratio)
    await callback.message.answer(
        f"–ü—Ä–æ–¥—É–∫—Ü–∏—è –¥–ª—è —Ñ–∞—Å–æ–≤–∫–∏: {product_names[0]} –∏ {product_names[1]}\n"
        f"–í–≤–µ–¥–∏—Ç–µ —Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ —Ñ–∞—Å–æ–≤–∫–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ X/Y (–Ω–∞–ø—Ä–∏–º–µ—Ä 2/1):"
    )


@router.message(PackagingStates.waiting_for_ratio)
@restrict_anonymous
async def process_ratio(
        message: Message,
        session: AsyncSession,
        state: FSMContext
):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–µ–¥–µ–Ω–Ω–æ–π –ø—Ä–æ–ø–æ—Ä—Ü–∏–∏ –∏ –≤—ã–≤–æ–¥ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞"""
    data = await state.get_data()
    raw_product_id = data["raw_product_id"]
    product_names = data["product_names"]

    # –ü–æ–ª—É—á–∞–µ–º –æ—Å—Ç–∞—Ç–æ–∫ —Å—ã—Ä—å—è
    raw_materials = await get_raw_materials(session)
    raw_amount = next((amt for rp, amt in raw_materials if rp.id == raw_product_id), 0)

    if raw_amount <= 0:
        await message.answer("–ù–∞ —Å–∫–ª–∞–¥–µ –Ω–µ—Ç –¥–∞–Ω–Ω–æ–≥–æ —Å—ã—Ä—å—è!")
        await state.clear()
        return

    # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –ø—Ä–æ–ø–æ—Ä—Ü–∏—é
    result, error = await calculate_packaging_ratio(
        session,
        raw_product_id,
        message.text,
        raw_amount
    )

    if error:
        await message.answer(error)
        return

    await message.answer(
        f"–î–ª—è —Ä–∞—Å—Ñ–∞—Å–æ–≤–∫–∏ –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–∏ —Å –ø—Ä–æ–ø–æ—Ä—Ü–∏–µ–π {message.text}:\n"
        f"üîπ {product_names[0]} - {result[product_names[0]]} –ø–∞—á–µ–∫\n"
        f"üîπ {product_names[1]} - {result[product_names[1]]} –ø–∞—á–µ–∫\n\n"
        f"–ë—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ {result['used_raw']} –∫–≥ —Å—ã—Ä—å—è"
    )
    await state.clear()


@router.callback_query(F.data == "packaging_done")
@restrict_anonymous
async def start_packaging_done(
        callback: CallbackQuery,
        session: AsyncSession,
        state: FSMContext
):
    """–ù–∞—á–∞–ª–æ –ø—Ä–æ—Ü–µ—Å—Å–∞ —É—á–µ—Ç–∞ —Ä–∞—Å—Ñ–∞—Å–æ–≤–∞–Ω–Ω–æ–π –ø—Ä–æ–¥—É–∫—Ü–∏–∏"""
    keyboard = await raw_materials_keyboard(session)
    await callback.message.answer(
        "–í—ã–±–µ—Ä–∏—Ç–µ —Å—ã—Ä—å–µ, –∫–æ—Ç–æ—Ä–æ–µ –±—ã–ª–æ —Ä–∞—Å—Ñ–∞—Å–æ–≤–∞–Ω–æ:",
        reply_markup=keyboard
    )
    await state.set_state(PackagingStates.waiting_for_done_raw_material)


@router.callback_query(
    PackagingStates.waiting_for_done_raw_material,
    F.data.startswith("select_raw_")
)
@restrict_anonymous
async def select_packaging_raw_material(
        callback: CallbackQuery,
        session: AsyncSession,
        state: FSMContext
):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Å—ã—Ä—å—è –∏ –∑–∞–ø—Ä–æ—Å –ø—Ä–æ–¥—É–∫—Ç–∞"""
    raw_product_id = int(callback.data.split("_")[-1])

    # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–æ–¥—É–∫—Ç—ã –∏–∑ —ç—Ç–æ–≥–æ —Å—ã—Ä—å—è
    products = await get_products_for_raw_material(session, raw_product_id)
    if not products:
        await callback.message.answer("–î–ª—è –¥–∞–Ω–Ω–æ–≥–æ —Å—ã—Ä—å—è –Ω–µ—Ç –ø—Ä–æ–¥—É–∫—Ü–∏–∏!")
        await state.clear()
        return

    keyboard = InlineKeyboardMarkup(inline_keyboard=[
                                                        [InlineKeyboardButton(text=p.name,
                                                                              callback_data=f"select_product_{p.id}")]
                                                        for p, _ in products
                                                    ] + [[InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞",
                                                                               callback_data="cancel_packaging")]])

    await state.update_data(raw_product_id=raw_product_id)
    await state.set_state(PackagingStates.waiting_for_product)
    await callback.message.answer(
        "–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–æ–¥—É–∫—Ç, –∫–æ—Ç–æ—Ä—ã–π –±—ã–ª —Ä–∞—Å—Ñ–∞—Å–æ–≤–∞–Ω:",
        reply_markup=keyboard
    )


@router.callback_query(
    PackagingStates.waiting_for_product,
    F.data.startswith("select_product_")
)
@restrict_anonymous
async def select_packaging_product(
        callback: CallbackQuery,
        state: FSMContext,
        session: AsyncSession
):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –ø—Ä–æ–¥—É–∫—Ç–∞ –∏ –∑–∞–ø—Ä–æ—Å –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞"""
    product_id = int(callback.data.split("_")[-1])
    await state.update_data(product_id=product_id)
    await state.set_state(PackagingStates.waiting_for_amount)
    await callback.message.answer("–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–∞—Å—Ñ–∞—Å–æ–≤–∞–Ω–Ω—ã—Ö –ø–∞—á–µ–∫:")


@router.message(PackagingStates.waiting_for_amount)
@restrict_anonymous
async def process_packaging_amount(
        message: Message,
        state: FSMContext,
        session: AsyncSession
):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –ø–∞—á–µ–∫ –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ñ–∞—Å–æ–≤–∫–∏"""
    try:
        amount = int(message.text)
        if amount <= 0:
            raise ValueError

        data = await state.get_data()
        product = await session.get(Product, data['product_id'])
        required_raw = amount * product.weight

        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ —Å—ã—Ä—å—è
        current_amount, is_available, max_packs = await get_raw_material_availability(
            session,
            data['raw_product_id'],
            product_weight=product.weight,
            required_amount=required_raw
        )

        if not is_available:
            await message.answer(
                f"‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—ã—Ä—å—è –Ω–∞ —Å–∫–ª–∞–¥–µ!\n"
                f"–¢—Ä–µ–±—É–µ—Ç—Å—è: {required_raw} –∫–≥\n"
                f"–î–æ—Å—Ç—É–ø–Ω–æ: {current_amount} –∫–≥\n"
                f"–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –º–æ–∂–Ω–æ —Ä–∞—Å—Ñ–∞—Å–æ–≤–∞—Ç—å: {max_packs} –ø–∞—á–µ–∫ –ø–æ {product.weight} –∫–≥"
            )
            return

        user_id = await get_user(session, message.from_user.id)
        print(user_id)
        # –î–∞–ª—å–Ω–µ–π—à–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–∞—Å–æ–≤–∫–∏...
        packaging = await save_packaging(
            session,
            user_id.id,
            product.id,
            product.raw_product_id,
            amount,
            required_raw)
        await update_stock_after_packaging(session, product.id, product.raw_product_id, amount, required_raw)

        await message.answer("–§–∞—Å–æ–≤–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞")
        await state.clear()

    except ValueError:
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ (—Ü–µ–ª–æ–µ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ).")
