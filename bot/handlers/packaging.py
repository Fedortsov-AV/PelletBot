from aiogram import Router, F
from aiogram.types import Message, CallbackQuery
from aiogram.fsm.context import FSMContext
from sqlalchemy.ext.asyncio import AsyncSession
from bot.keyboards.packaging import packaging_main_keyboard
from bot.services.packaging_service import get_current_stock, save_packaging
from bot.fsm.packaging import PackagingStates

router = Router()

@router.message(F.text == "üì¶ –§–∞—Å–æ–≤–∫–∞")
async def show_packaging_menu(message: Message):
    """–û—Ç–∫—Ä—ã–≤–∞–µ—Ç –º–µ–Ω—é —Ñ–∞—Å–æ–≤–∫–∏"""
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=packaging_main_keyboard())

@router.callback_query(F.data == "packaging_proportion")
async def show_packaging_proportion(callback: CallbackQuery, session: AsyncSession):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ–º, —Å–∫–æ–ª—å–∫–æ –Ω—É–∂–Ω–æ —Ä–∞—Å—Ñ–∞—Å–æ–≤–∞—Ç—å"""
    total_stock = await get_current_stock(session)

    # –î–æ–ø—É—Å—Ç–∏–º, —É –Ω–∞—Å —Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ 2:1 (2 –ø–∞—á–∫–∏ –ø–æ 3 –∫–≥ –Ω–∞ 1 –ø–∞—á–∫—É –ø–æ 5 –∫–≥)
    small_packs = (total_stock // 8) * 2
    large_packs = (total_stock // 8)

    await callback.message.answer(
        f"–ù–µ–æ–±—Ö–æ–¥–∏–º–æ —Ä–∞—Å—Ñ–∞—Å–æ–≤–∞—Ç—å {small_packs} –ø–∞—á–µ–∫ –ø–æ 3–∫–≥ –∏ {large_packs} –ø–∞—á–µ–∫ –ø–æ 5–∫–≥"
    )


@router.callback_query(F.data == "packaging_done")
async def start_packaging(callback: CallbackQuery, state: FSMContext):
    """–ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–∞—Å—Ñ–∞—Å–æ–≤–∞–Ω–Ω—ã—Ö –ø–∞—á–µ–∫"""
    await state.set_state(PackagingStates.waiting_for_small_packs)
    await callback.message.answer("–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–∞—á–µ–∫ –ø–æ 3–∫–≥:")


@router.message(PackagingStates.waiting_for_small_packs)
async def get_small_packs(message: Message, state: FSMContext):
    """–°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ 3–∫–≥ –ø–∞—á–µ–∫"""
    await state.update_data(small_packs=int(message.text))
    await state.set_state(PackagingStates.waiting_for_large_packs)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–∞—á–µ–∫ –ø–æ 5–∫–≥:")


@router.message(PackagingStates.waiting_for_large_packs)
async def get_large_packs(message: Message, state: FSMContext, session: AsyncSession):
    """–°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ, –∑–∞–ø–∏—Å—ã–≤–∞–µ–º –≤ –ë–î"""
    data = await state.get_data()
    small_packs = data["small_packs"]
    large_packs = int(message.text)
    used_raw = small_packs * 3 + large_packs * 5  # –†–∞—Å—Ö–æ–¥ –ø–µ—Ä–≤–∏—á–Ω–æ–π –ø—Ä–æ–¥—É–∫—Ü–∏–∏

    await save_packaging(session, message.from_user.id, small_packs, large_packs, used_raw)

    await message.answer(f"–§–∞—Å–æ–≤–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –ó–∞–ø–∏—Å–∞–Ω–æ:\n"
                         f"üîπ {small_packs} –ø–∞—á–µ–∫ –ø–æ 3 –∫–≥\n"
                         f"üîπ {large_packs} –ø–∞—á–µ–∫ –ø–æ 5 –∫–≥\n"
                         f"üìâ –ò–∑—Ä–∞—Å—Ö–æ–¥–æ–≤–∞–Ω–æ: {used_raw} –∫–≥")
    await state.clear()


@router.callback_query(F.data == "set_packaging_ratio")
async def ask_for_ratio(callback: CallbackQuery, state: FSMContext):
    """–ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ —É–ø–∞–∫–æ–≤–∫–∏"""
    await state.set_state(PackagingStates.waiting_for_ratio)
    await callback.message.answer("–í–≤–µ–¥–∏—Ç–µ —Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ –ø–∞—á–µ–∫ –ø–æ 3–∫–≥ –∏ 5–∫–≥ –≤ —Ñ–æ—Ä–º–∞—Ç–µ X/Y:")


@router.message(PackagingStates.waiting_for_ratio)
async def save_ratio(message: Message, state: FSMContext):
    """–°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ"""
    try:
        small, large = map(int, message.text.split('/'))
        # –¢—É—Ç –º–æ–∂–Ω–æ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ –≤ –ë–î
        await message.answer(f"–ù–æ–≤–æ–µ —Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ: {small} –ø–∞—á–µ–∫ –ø–æ 3–∫–≥ –Ω–∞ {large} –ø–∞—á–µ–∫ –ø–æ 5–∫–≥")
        await state.clear()
    except ValueError:
        await message.answer("–û—à–∏–±–∫–∞! –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ X/Y")
