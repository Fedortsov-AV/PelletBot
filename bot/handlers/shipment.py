from aiogram import types, F
from aiogram.fsm.context import FSMContext
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from sqlalchemy.ext.asyncio import AsyncSession

from bot.fsm.shipment import ShipmentState
from bot.services.shipment import save_shipment, get_available_products
from aiogram import Router

router = Router()


@router.message(F.text == "üöö –û—Ç–≥—Ä—É–∑–∫–∞")
async def show_shipment_menu(message: types.Message, session: AsyncSession):
    """–ú–µ–Ω—é –æ—Ç–≥—Ä—É–∑–∫–∏ —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø—Ä–æ–¥—É–∫—Ç–æ–≤"""
    available_products = await get_available_products(session)

    if not available_products:
        await message.answer("–ù–∞ —Å–∫–ª–∞–¥–µ –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø—Ä–æ–¥—É–∫—Ç–æ–≤ –¥–ª—è –æ—Ç–≥—Ä—É–∑–∫–∏.")
        return

    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [
                InlineKeyboardButton(text="üì¶ –î–æ–±–∞–≤–∏—Ç—å –æ—Ç–≥—Ä—É–∑–∫—É", callback_data="add_shipment"),
                InlineKeyboardButton(text="‚ùå –ó–∞–∫—Ä—ã—Ç—å", callback_data="close_menu")
            ]
        ]
    )
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=keyboard)

@router.callback_query(F.data == "add_shipment")
async def start_shipment_process(
        callback: types.CallbackQuery,
        state: FSMContext,
        session: AsyncSession
):
    """–ù–∞—á–∞–ª–æ –ø—Ä–æ—Ü–µ—Å—Å–∞ –æ—Ç–≥—Ä—É–∑–∫–∏"""
    await callback.answer()

    products = await get_available_products(session)

    # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø—Ä–æ–¥—É–∫—Ç–∞
    buttons = []
    for product, amount in products:
        buttons.append(
            [InlineKeyboardButton(
                text=f"{product.name} (–æ—Å—Ç–∞—Ç–æ–∫: {amount})",
                callback_data=f"select_product:{product.id}"
            )]
        )

    keyboard = InlineKeyboardMarkup(inline_keyboard=buttons)

    await callback.message.answer(
        "–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–æ–¥—É–∫—Ç –¥–ª—è –æ—Ç–≥—Ä—É–∑–∫–∏:",
        reply_markup=keyboard
    )
    await state.set_state(ShipmentState.selecting_product)


@router.callback_query(F.data.startswith("select_product:"), ShipmentState.selecting_product)
async def select_product_for_shipment(
    callback: types.CallbackQuery,
    state: FSMContext
):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –ø—Ä–æ–¥—É–∫—Ç–∞"""
    product_id = int(callback.data.split(":")[1])
    await state.update_data(product_id=product_id)
    await callback.message.answer("–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–ª—è –æ—Ç–≥—Ä—É–∑–∫–∏:")
    await state.set_state(ShipmentState.entering_quantity)
    await callback.answer()


@router.message(ShipmentState.entering_quantity)
async def enter_shipment_quantity(
        message: types.Message,
        state: FSMContext,
        session: AsyncSession
):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞"""
    try:
        quantity = int(message.text)
        if quantity <= 0:
            raise ValueError
    except ValueError:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ü–µ–ª–æ–µ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ.")
        return

    data = await state.get_data()
    product_id = data['product_id']

    try:
        await save_shipment(
            telegram_id=message.from_user.id,  # –ü–µ—Ä–µ–¥–∞–µ–º telegram_id –≤–º–µ—Å—Ç–æ user_id
            product_id=product_id,
            quantity=quantity,
            session=session
        )

        keyboard = InlineKeyboardMarkup(
            inline_keyboard=[
                [
                    InlineKeyboardButton(text="‚úÖ –î–∞", callback_data="add_more"),
                    InlineKeyboardButton(text="‚ùå –ù–µ—Ç", callback_data="finish_shipment")
                ]
            ]
        )

        await message.answer(
            "–û—Ç–≥—Ä—É–∑–∫–∞ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞. –î–æ–±–∞–≤–∏—Ç—å –µ—â–µ –ø—Ä–æ–¥—É–∫—Ç—ã?",
            reply_markup=keyboard
        )
        await state.set_state(ShipmentState.adding_more)

    except ValueError as e:
        await message.answer(str(e))
        await state.clear()


@router.callback_query(F.data == "add_more", ShipmentState.adding_more)
async def add_more_products(
    callback: types.CallbackQuery,
    state: FSMContext,
    session: AsyncSession
):
    """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –ø—Ä–æ–¥—É–∫—Ç–æ–≤ –≤ –æ—Ç–≥—Ä—É–∑–∫—É"""
    await start_shipment_process(callback, state, session)


@router.callback_query(F.data == "finish_shipment", ShipmentState.adding_more)
async def finish_shipment_process(
    callback: types.CallbackQuery,
    state: FSMContext
):
    """–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –ø—Ä–æ—Ü–µ—Å—Å–∞ –æ—Ç–≥—Ä—É–∑–∫–∏"""
    await callback.message.answer("–û—Ç–≥—Ä—É–∑–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞.")
    await state.clear()
    await callback.answer()


@router.callback_query(F.data == "close_menu")
async def close_menu(callback: types.CallbackQuery):
    """–ó–∞–∫—Ä—ã—Ç–∏–µ –º–µ–Ω—é"""
    await callback.message.delete()
    await callback.answer()