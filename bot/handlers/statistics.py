from datetime import datetime
from typing import Dict

from aiogram import Router, F
from aiogram.fsm.context import FSMContext
from aiogram.types import CallbackQuery, Message
from sqlalchemy.ext.asyncio import AsyncSession

from bot.fsm.statistics import StatisticsStates
from bot.keyboards.statistics import statistics_keyboard
from bot.services.statistics import (
    get_stock_info,
    get_packaging_stats,
    get_arrivals_stats,
    get_user_expenses,
    get_all_expenses, get_detailed_expenses, get_shipments_period_stats, get_shipments_month_stats
)
from bot.services.user_service import get_user
from bot.services.wrapers import staff_required

router = Router()


def format_stock_info(stock_data: Dict) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–∫–ª–∞–¥–µ –≤ —á–∏—Ç–∞–µ–º—ã–π —Ç–µ–∫—Å—Ç"""
    text = "üì¶ –û—Å—Ç–∞—Ç–∫–∏ –Ω–∞ —Å–∫–ª–∞–¥–µ:\n"

    if stock_data.get("raw_materials"):
        text += "\nüß∂ –°—ã—Ä—å–µ:\n"
        for name, amount in stock_data["raw_materials"].items():
            text += f"‚Ä¢ {name}: {amount} –∫–≥\n"

    if stock_data.get("products"):
        text += "\nüì¶ –ì–æ—Ç–æ–≤–∞—è –ø—Ä–æ–¥—É–∫—Ü–∏—è:\n"
        for name, amount in stock_data["products"].items():
            text += f"‚Ä¢ {name}: {amount} —à—Ç.\n"

    if not stock_data.get("raw_materials") and not stock_data.get("products"):
        text += "\n‚ÑπÔ∏è –î–∞–Ω–Ω—ã–µ –æ —Å–∫–ª–∞–¥–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç"

    return text


@router.message(F.text == "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")
@staff_required
async def show_statistics_menu(message: Message, session: AsyncSession):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –º–µ–Ω—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
    await message.answer(
        "–í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—ã–π —Ä–∞–∑–¥–µ–ª —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:",
        reply_markup=statistics_keyboard()
    )


@router.callback_query(F.data == "statistics:stock")
@staff_required
async def handle_stock_stats(callback: CallbackQuery, session: AsyncSession):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∑–∞–ø—Ä–æ—Å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –æ—Å—Ç–∞—Ç–∫–æ–≤"""
    try:
        stock_data = await get_stock_info(session)
        response_text = format_stock_info(stock_data)
        await callback.message.answer(response_text, reply_markup=statistics_keyboard())
    except Exception as e:
        await callback.message.answer(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö: {str(e)}")


@router.callback_query(F.data == "statistics:packed_month")
@staff_required
async def handle_packed_month(callback: CallbackQuery, session: AsyncSession):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∑–∞–ø—Ä–æ—Å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Ñ–∞—Å–æ–≤–∫–∏ –∑–∞ –º–µ—Å—è—Ü"""
    try:
        stats = await get_packaging_stats(session, period="month")
        await callback.message.answer(
            f"üìä –†–∞—Å—Ñ–∞—Å–æ–≤–∞–Ω–æ –∑–∞ —Ç–µ–∫—É—â–∏–π –º–µ—Å—è—Ü:\n"
            f"‚Ä¢ –ü–∞—á–∫–∏ 3–∫–≥: {stats['packs_3kg']} —à—Ç.\n"
            f"‚Ä¢ –ü–∞—á–∫–∏ 5–∫–≥: {stats['packs_5kg']} —à—Ç.",
            reply_markup=statistics_keyboard()
        )
    except Exception as e:
        await callback.message.answer(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö: {str(e)}")


@router.callback_query(F.data == "statistics:packed_period")
@staff_required
async def start_packed_period(callback: CallbackQuery, state: FSMContext, session: AsyncSession):
    """–ó–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –ø–µ—Ä–∏–æ–¥ –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Ñ–∞—Å–æ–≤–∫–∏"""
    await callback.message.answer(
        "–í–≤–µ–¥–∏—Ç–µ –ø–µ—Ä–∏–æ–¥ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì - –î–î.–ú–ú.–ì–ì–ì–ì\n"
        "–ù–∞–ø—Ä–∏–º–µ—Ä: 01.04.2025 - 30.04.2025"
    )
    await state.set_state(StatisticsStates.wait_packed_period)


@router.message(StatisticsStates.wait_packed_period)
@staff_required
async def process_packed_period(message: Message, state: FSMContext, session: AsyncSession):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–≤–µ–¥–µ–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥ –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Ñ–∞—Å–æ–≤–∫–∏"""
    try:
        start_str, end_str = map(str.strip, message.text.split("-"))
        start_date = datetime.strptime(start_str, "%d.%m.%Y").date()
        end_date = datetime.strptime(end_str, "%d.%m.%Y").date()

        if start_date > end_date:
            raise ValueError("–ù–∞—á–∞–ª—å–Ω–∞—è –¥–∞—Ç–∞ –±–æ–ª—å—à–µ –∫–æ–Ω–µ—á–Ω–æ–π")

        stats = await get_packaging_stats(
            session,
            period="custom",
            start_date=start_date,
            end_date=end_date
        )

        await message.answer(
            f"üìÜ –†–∞—Å—Ñ–∞—Å–æ–≤–∞–Ω–æ –∑–∞ –ø–µ—Ä–∏–æ–¥ {message.text}:\n"
            f"‚Ä¢ –ü–∞—á–∫–∏ 3–∫–≥: {stats['packs_3kg']} —à—Ç.\n"
            f"‚Ä¢ –ü–∞—á–∫–∏ 5–∫–≥: {stats['packs_5kg']} —à—Ç.",
            reply_markup=statistics_keyboard()
        )
    except ValueError as e:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
    except Exception as e:
        await message.answer(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö: {str(e)}")
    finally:
        await state.clear()


@router.callback_query(F.data == "statistics:arrivals_period")
@staff_required
async def start_arrivals_period(callback: CallbackQuery, state: FSMContext, session: AsyncSession):
    """–ó–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –ø–µ—Ä–∏–æ–¥ –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø—Ä–∏—Ö–æ–¥–æ–≤"""
    await callback.message.answer(
        "–í–≤–µ–¥–∏—Ç–µ –ø–µ—Ä–∏–æ–¥ –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø—Ä–∏—Ö–æ–¥–æ–≤ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì - –î–î.–ú–ú.–ì–ì–ì–ì\n"
        "–ù–∞–ø—Ä–∏–º–µ—Ä: 01.04.2025 - 30.04.2025"
    )
    await state.set_state(StatisticsStates.wait_arrivals_period)


@router.message(StatisticsStates.wait_arrivals_period)
@staff_required
async def process_arrivals_period(message: Message, state: FSMContext, session: AsyncSession):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–≤–µ–¥–µ–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥ –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø—Ä–∏—Ö–æ–¥–æ–≤"""
    try:
        start_str, end_str = map(str.strip, message.text.split("-"))
        start_date = datetime.strptime(start_str, "%d.%m.%Y").date()
        end_date = datetime.strptime(end_str, "%d.%m.%Y").date()

        if start_date > end_date:
            raise ValueError("–ù–∞—á–∞–ª—å–Ω–∞—è –¥–∞—Ç–∞ –±–æ–ª—å—à–µ –∫–æ–Ω–µ—á–Ω–æ–π")

        arrivals = await get_arrivals_stats(
            session,
            period="custom",
            start_date=start_date,
            end_date=end_date
        )

        if not arrivals:
            await message.answer(f"üì• –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ –ø—Ä–∏—Ö–æ–¥–∞—Ö –∑–∞ –ø–µ—Ä–∏–æ–¥ {message.text}", reply_markup=statistics_keyboard())
            return

        response = f"üì• –ü—Ä–∏—Ö–æ–¥—ã –∑–∞ –ø–µ—Ä–∏–æ–¥ {message.text}:\n\n"
        for arrival_type, amount in arrivals.items():
            response += f"‚Ä¢ {arrival_type}: {amount} –∫–≥\n"

        await message.answer(response, reply_markup=statistics_keyboard())
    except ValueError as e:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
    except Exception as e:
        await message.answer(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö: {str(e)}")
    finally:
        await state.clear()


@router.callback_query(F.data == "statistics:arrivals_month")
@staff_required
async def handle_arrivals_month(callback: CallbackQuery, session: AsyncSession):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∑–∞–ø—Ä–æ—Å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø—Ä–∏—Ö–æ–¥–æ–≤ –∑–∞ –º–µ—Å—è—Ü"""
    try:
        arrivals = await get_arrivals_stats(session, period="month")

        if not arrivals:
            await callback.message.answer("üì• –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ –ø—Ä–∏—Ö–æ–¥–∞—Ö –∑–∞ —Ç–µ–∫—É—â–∏–π –º–µ—Å—è—Ü", reply_markup=statistics_keyboard())
            return

        response = "üì• –ü—Ä–∏—Ö–æ–¥—ã –∑–∞ —Ç–µ–∫—É—â–∏–π –º–µ—Å—è—Ü:\n\n"
        for arrival_type, amount in arrivals.items():
            response += f"‚Ä¢ {arrival_type}: {amount} –∫–≥\n"

        await callback.message.answer(response, reply_markup=statistics_keyboard())
    except Exception as e:
        await callback.message.answer(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö: {str(e)}")


@router.callback_query(F.data == "statistics:expenses_user")
@staff_required
async def handle_user_expenses(callback: CallbackQuery, session: AsyncSession):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∑–∞–ø—Ä–æ—Å —Ä–∞—Å—Ö–æ–¥–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    try:
        user = await get_user(session, callback.from_user.id)
        total = await get_user_expenses(session, user.id)
        await callback.message.answer(
            f"üí∞ –í–∞—à–∏ —Ä–∞—Å—Ö–æ–¥—ã –∏–∑ —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã—Ö —Å—Ä–µ–¥—Å—Ç–≤: {total} —Ä—É–±.",
            reply_markup=statistics_keyboard()
        )
    except Exception as e:
        await callback.message.answer(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö: {str(e)}")


@router.callback_query(F.data == "statistics:expenses_all")
@staff_required
async def handle_all_expenses(callback: CallbackQuery, session: AsyncSession):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∑–∞–ø—Ä–æ—Å –≤—Å–µ—Ö —Ä–∞—Å—Ö–æ–¥–æ–≤"""
    try:
        expenses = await get_all_expenses(session)

        if not expenses:
            await callback.message.answer("üìú –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ —Ä–∞—Å—Ö–æ–¥–∞—Ö")
            return

        text = "üìú –ü–æ—Å–ª–µ–¥–Ω–∏–µ —Ä–∞—Å—Ö–æ–¥—ã:\n\n"
        for expense in expenses[:10]:  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º 10 –ø–æ—Å–ª–µ–¥–Ω–∏–º–∏ –∑–∞–ø–∏—Å—è–º–∏
            text += (
                f"üë§ {expense['user']}\n"
                f"üí∞ {expense['amount']} —Ä—É–±. | {expense['date']}\n"
                f"üìù {expense['purpose']}\n\n"
            )

        await callback.message.answer(text, reply_markup=statistics_keyboard())
    except Exception as e:
        await callback.message.answer(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö: {str(e)}")


@router.callback_query(F.data == "statistics:expenses_detailed")
@staff_required
async def handle_detailed_expenses(callback: CallbackQuery, session: AsyncSession):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∑–∞–ø—Ä–æ—Å –¥–µ—Ç–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞ —Ä–∞—Å—Ö–æ–¥–æ–≤"""
    try:
        expenses = await get_detailed_expenses(session)

        if not expenses:
            await callback.message.answer("üìú –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ —Ä–∞—Å—Ö–æ–¥–∞—Ö")
            return

        # –†–∞–∑–±–∏–≤–∞–µ–º –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ 5 –∑–∞–ø–∏—Å–µ–π, —á—Ç–æ–±—ã –Ω–µ –ø—Ä–µ–≤—ã—Å–∏—Ç—å –ª–∏–º–∏—Ç –¥–ª–∏–Ω—ã
        for i in range(0, len(expenses), 5):
            batch = expenses[i:i + 5]
            response = "üìú –î–µ—Ç–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ä–∞—Å—Ö–æ–¥—ã:\n\n"

            for expense in batch:
                response += (
                    f"üîπ ID: {expense['id']}\n"
                    f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {expense['user']}\n"
                    f"üí∞ –°—É–º–º–∞: {expense['amount']} —Ä—É–±.\n"
                    f"üìù –ù–∞–∑–Ω–∞—á–µ–Ω–∏–µ: {expense['purpose']}\n"
                    f"üè¶ –ò—Å—Ç–æ—á–Ω–∏–∫: {expense['source']}\n"
                    f"üìÖ –î–∞—Ç–∞: {expense['date']}\n\n"
                )

            await callback.message.answer(response, reply_markup=statistics_keyboard())

    except Exception as e:
        await callback.message.answer(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö: {str(e)}")


@router.callback_query(F.data == "statistics:shipments_month")
@staff_required
async def handle_shipments_month(
        callback: CallbackQuery,
        session: AsyncSession
):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –æ—Ç–≥—Ä—É–∑–æ–∫ –∑–∞ –º–µ—Å—è—Ü"""
    await callback.answer()

    shipments = await get_shipments_month_stats(session)

    if not shipments:
        await callback.message.answer("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ–± –æ—Ç–≥—Ä—É–∑–∫–∞—Ö –∑–∞ —Ç–µ–∫—É—â–∏–π –º–µ—Å—è—Ü.")
        return

    message_text = "üìä –û—Ç–≥—Ä—É–∂–µ–Ω–æ –∑–∞ –º–µ—Å—è—Ü:\n\n"
    for product_name, quantity in shipments:
        message_text += f"{product_name}: {quantity} —à—Ç.\n"

    await callback.message.answer(message_text, reply_markup=statistics_keyboard())


@router.callback_query(F.data == "statistics:shipments_period")
@staff_required
async def handle_shipments_period_start(
        callback: CallbackQuery,
        state: FSMContext,
        session: AsyncSession
):
    """–ó–∞–ø—Ä–æ—Å –Ω–∞—á–∞–ª—å–Ω–æ–π –¥–∞—Ç—ã –ø–µ—Ä–∏–æ–¥–∞ –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –æ—Ç–≥—Ä—É–∑–æ–∫"""
    await callback.answer()
    await callback.message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–∞—á–∞–ª—å–Ω—É—é –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì:")
    await state.set_state(StatisticsStates.waiting_shipments_start_date)


@router.message(StatisticsStates.waiting_shipments_start_date)
@staff_required
async def handle_shipments_start_date(
        message: Message,
        state: FSMContext,
        session: AsyncSession
):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞—á–∞–ª—å–Ω–æ–π –¥–∞—Ç—ã –ø–µ—Ä–∏–æ–¥–∞"""
    try:
        start_date = datetime.strptime(message.text, "%d.%m.%Y")
        await state.update_data(start_date=start_date)
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –∫–æ–Ω–µ—á–Ω—É—é –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì:")
        await state.set_state(StatisticsStates.waiting_shipments_end_date)
    except ValueError:
        await message.answer("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")


@router.message(StatisticsStates.waiting_shipments_end_date)
@staff_required
async def handle_shipments_end_date(
        message: Message,
        state: FSMContext,
        session: AsyncSession
):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–Ω–µ—á–Ω–æ–π –¥–∞—Ç—ã –ø–µ—Ä–∏–æ–¥–∞ –∏ –≤—ã–≤–æ–¥ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
    try:
        end_date = datetime.strptime(message.text, "%d.%m.%Y")
        data = await state.get_data()
        start_date = data['start_date']

        shipments = await get_shipments_period_stats(session, start_date, end_date)

        if not shipments:
            await message.answer(
                f"–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ–± –æ—Ç–≥—Ä—É–∑–∫–∞—Ö –∑–∞ –ø–µ—Ä–∏–æ–¥ —Å {start_date.strftime('%d.%m.%Y')} –ø–æ {end_date.strftime('%d.%m.%Y')}.")
            return

        message_text = f"üìä –û—Ç–≥—Ä—É–∂–µ–Ω–æ –∑–∞ –ø–µ—Ä–∏–æ–¥ —Å {start_date.strftime('%d.%m.%Y')} –ø–æ {end_date.strftime('%d.%m.%Y')}:\n\n"
        for product_name, quantity in shipments:
            message_text += f"{product_name}: {quantity} —à—Ç.\n"

        await message.answer(message_text, reply_markup=statistics_keyboard())
        await state.clear()

    except ValueError:
        await message.answer("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")

@router.callback_query(F.data == "statistics:close")
async def close_menu(callback: CallbackQuery):
    """–ó–∞–∫—Ä—ã—Ç–∏–µ –º–µ–Ω—é"""
    await callback.message.delete()
    await callback.answer()
