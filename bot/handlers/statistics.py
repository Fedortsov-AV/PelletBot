from aiogram import Router, F
from aiogram.types import CallbackQuery, Message
from aiogram.fsm.context import FSMContext
from datetime import datetime

from sqlalchemy.ext.asyncio import AsyncSession

from bot.keyboards.statistics import statistics_keyboard
from bot.models.database import async_session
from bot.services.shipment import get_shipments_for_current_month, get_shipments_for_period
from bot.services.statistics import (

    get_packed_month,
    get_packed_period,
    get_arrivals_month,
    get_arrivals_period,
    get_user_expenses,
    get_all_expenses
)
from bot.fsm.statistics import StatisticsStates
from bot.services.storage import get_raw_material_storage

router = Router()

# üìä –•–µ–Ω–¥–ª–µ—Ä –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É "–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞"
@router.message(F.text == "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")
async def statistics_menu(message: Message):
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—ã–π —Ä–∞–∑–¥–µ–ª —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:", reply_markup=statistics_keyboard())

# –û—Ç–∫—Ä—ã—Ç–∏–µ –º–µ–Ω—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
@router.callback_query(F.data == "statistics")
async def open_statistics_menu(callback: CallbackQuery):
    await callback.message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É:", reply_markup=statistics_keyboard())

# –û—Å—Ç–∞—Ç–∫–∏ –Ω–∞ —Å–∫–ª–∞–¥–µ
@router.callback_query(F.data == "statistics:stock")
async def stock_statistics(callback: CallbackQuery, session: AsyncSession):
    stock = await get_raw_material_storage(session)
    await callback.message.answer(
        f"–°–µ–π—á–∞—Å –Ω–∞ —Å–∫–ª–∞–¥–µ:\n"
        f"- {stock.pellets_6mm} –∫–≥ –ø–µ–ª–ª–µ—Ç –ø–æ 6–º–º\n"
        f"- {stock.packs_3kg} –ø–∞—á–µ–∫ –ø–æ 3 –∫–≥\n"
        f"- {stock.packs_5kg} –ø–∞—á–µ–∫ –ø–æ 5 –∫–≥"
    )

# –†–∞—Å—Ñ–∞—Å–æ–≤–∞–Ω–æ –∑–∞ –º–µ—Å—è—Ü
@router.callback_query(F.data == "statistics:packed_month")
async def packed_month_statistics(callback: CallbackQuery, session: AsyncSession):
    result = await get_packed_month(session)
    await callback.message.answer(
        f"–ó–∞ —Ç–µ–∫—É—â–∏–π –º–µ—Å—è—Ü —Ä–∞—Å—Ñ–∞—Å–æ–≤–∞–Ω–æ:\n"
        f"- {result['packs_3kg']} –ø–∞—á–µ–∫ –ø–æ 3 –∫–≥\n"
        f"- {result['packs_5kg']} –ø–∞—á–µ–∫ –ø–æ 5 –∫–≥"
    )

# –†–∞—Å—Ñ–∞—Å–æ–≤–∞–Ω–æ –∑–∞ –ø–µ—Ä–∏–æ–¥
@router.callback_query(F.data == "statistics:packed_period")
async def packed_period_statistics(callback: CallbackQuery, state: FSMContext):
    await callback.message.answer("–í–≤–µ–¥–∏—Ç–µ –ø–µ—Ä–∏–æ–¥ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì - –î–î.–ú–ú.–ì–ì–ì–ì:")
    await state.set_state(StatisticsStates.select_period_packed)

@router.message(StatisticsStates.select_period_packed)
async def get_packed_period_statistics(message: Message, state: FSMContext, session: AsyncSession):
    try:
        start_date, end_date = map(str.strip, message.text.split("-"))
        start_date = datetime.strptime(start_date, "%d.%m.%Y")
        end_date = datetime.strptime(end_date, "%d.%m.%Y")

        result = await get_packed_period(session, start_date, end_date)
        await message.answer(
            f"–ó–∞ –ø–µ—Ä–∏–æ–¥ {message.text} —Ä–∞—Å—Ñ–∞—Å–æ–≤–∞–Ω–æ:\n"
            f"- {result['packs_3kg']} –ø–∞—á–µ–∫ –ø–æ 3 –∫–≥\n"
            f"- {result['packs_5kg']} –ø–∞—á–µ–∫ –ø–æ 5 –∫–≥"
        )
    except ValueError:
        await message.answer("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã! –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
    finally:
        await state.clear()

# –°—É–º–º–∞ –ø—Ä–∏—Ö–æ–¥–æ–≤ –∑–∞ –º–µ—Å—è—Ü
@router.callback_query(F.data == "statistics:arrivals_month")
async def arrivals_month_statistics(callback: CallbackQuery, session: AsyncSession):
    total_arrivals = await get_arrivals_month(session)
    await callback.message.answer(f"–ü—Ä–∏—Ö–æ–¥ –∑–∞ —Ç–µ–∫—É—â–∏–π –º–µ—Å—è—Ü —Å–æ—Å—Ç–∞–≤–ª—è–µ—Ç {total_arrivals} –∫–≥.")

# –°—É–º–º–∞ –ø—Ä–∏—Ö–æ–¥–æ–≤ –∑–∞ –ø–µ—Ä–∏–æ–¥
@router.callback_query(F.data == "statistics:arrivals_period")
async def arrivals_period_statistics(callback: CallbackQuery, state: FSMContext):
    await callback.message.answer("–í–≤–µ–¥–∏—Ç–µ –ø–µ—Ä–∏–æ–¥ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì - –î–î.–ú–ú.–ì–ì–ì–ì:")
    await state.set_state(StatisticsStates.select_period_arrivals)

@router.message(StatisticsStates.select_period_arrivals)
async def get_arrivals_period_statistics(message: Message, state: FSMContext, session: AsyncSession):
    try:
        start_date, end_date = map(str.strip, message.text.split("-"))
        start_date = datetime.strptime(start_date, "%d.%m.%Y")
        end_date = datetime.strptime(end_date, "%d.%m.%Y")

        total_arrivals = await get_arrivals_period(session, start_date, end_date)
        await message.answer(f"–ü—Ä–∏—Ö–æ–¥ –∑–∞ {message.text} —Å–æ—Å—Ç–∞–≤–ª—è–µ—Ç {total_arrivals} –∫–≥.")
    except ValueError:
        await message.answer("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã! –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
    finally:
        await state.clear()

# –†–∞—Å—Ö–æ–¥—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
@router.callback_query(F.data == "statistics:expenses_user")
async def user_expenses_statistics(callback: CallbackQuery, session: AsyncSession):
    total_expenses = await get_user_expenses(session, callback.from_user.id)
    await callback.message.answer(f"–í–∞—à–∏ —Ä–∞—Å—Ö–æ–¥—ã –∏–∑ —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã—Ö —Å—Ä–µ–¥—Å—Ç–≤ —Å–æ—Å—Ç–∞–≤–ª—è—é—Ç {total_expenses} —Ä—É–±.")


# –•–µ–Ω–¥–ª–µ—Ä –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å—É–º–º—ã –æ—Ç–≥—Ä—É–∑–æ–∫ –∑–∞ —Ç–µ–∫—É—â–∏–π –º–µ—Å—è—Ü
@router.callback_query(F.data == "statistics:shipments_month")
async def get_shipments_this_month(callback_query: CallbackQuery, session: AsyncSession):
    """–ü–æ–ª—É—á–∏—Ç—å —Å—É–º–º—É –æ—Ç–≥—Ä—É–∑–æ–∫ –∑–∞ —Ç–µ–∫—É—â–∏–π –º–µ—Å—è—Ü"""
    # –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —Å–µ—Å—Å–∏—è –ø–µ—Ä–µ–¥–∞–µ—Ç—Å—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ
    if session is None:
        await callback_query.answer("–û—à–∏–±–∫–∞ —Å–µ—Å—Å–∏–∏.")
        return

    shipments = await get_shipments_for_current_month(session)

    if shipments:
        small_packs, large_packs = shipments
        total_packs = (small_packs or 0) + (large_packs or 0)
        await callback_query.message.answer(f"–ó–∞ —Ç–µ–∫—É—â–∏–π –º–µ—Å—è—Ü –æ—Ç–≥—Ä—É–∂–µ–Ω–æ:\n"
                                    f"–ü–∞—á–∫–∏ –ø–æ 3 –∫–≥: {small_packs or 0}\n"
                                    f"–ü–∞—á–∫–∏ –ø–æ 5 –∫–≥: {large_packs or 0}\n"
                                    f"–û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–∞—á–µ–∫: {total_packs}")
    else:
        await callback_query.message.answer("–ó–∞ —Ç–µ–∫—É—â–∏–π –º–µ—Å—è—Ü –Ω–µ—Ç –æ—Ç–≥—Ä—É–∑–æ–∫.")

@router.callback_query(F.data == "statistics:expenses_all")
async def all_expenses_statistics(callback: CallbackQuery, session: AsyncSession):
    expenses = await get_all_expenses(session)

    if not expenses:
        await callback.message.answer("‚ùå –í –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–∫–∞ –Ω–µ—Ç —Ä–∞—Å—Ö–æ–¥–æ–≤.")
        return

    text = "\n".join([f"üë§ {item['user']}: üí∞ {item['amount']} —Ä—É–±. ‚ûù {item['purpose']}" for item in expenses])
    await callback.message.answer(f"üìú *–°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —Ä–∞—Å—Ö–æ–¥–æ–≤:*\n{text}", parse_mode="Markdown")

router.callback_query(F.data == "statistics:shipments_period")
async def get_shipments_for_custom_period(callback: CallbackQuery):
    """–ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –ø–µ—Ä–∏–æ–¥ –æ—Ç–≥—Ä—É–∑–æ–∫ –∑–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π –∏–Ω—Ç–µ—Ä–≤–∞–ª –≤—Ä–µ–º–µ–Ω–∏."""
    # –ó–∞–ø—Ä–æ—Å–∏–º —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–∞—Ç—ã –Ω–∞—á–∞–ª–∞ –∏ –∫–æ–Ω—Ü–∞ –ø–µ—Ä–∏–æ–¥–∞
    await callback.message.answer("–í–≤–µ–¥–∏—Ç–µ –ø–µ—Ä–∏–æ–¥ –≤ —Ñ–æ—Ä–º–∞—Ç–µ: –¥–¥.–º–º.–≥–≥–≥–≥ - –¥–¥.–º–º.–≥–≥–≥–≥")

@router.message(F.text)
async def handle_period_input(message: Message, session: AsyncSession, state: FSMContext):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤–≤–æ–¥ –ø–µ—Ä–∏–æ–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º."""
    period = message.text.strip()

    try:
        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Å—Ç—Ä–æ–∫–∏ –≤ —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç
        start_date_str, end_date_str = period.split(" - ")

        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ datetime
        start_date = datetime.strptime(start_date_str, "%d.%m.%Y")
        end_date = datetime.strptime(end_date_str, "%d.%m.%Y")

        # –ü–æ–ª—É—á–∞–µ–º –æ—Ç–≥—Ä—É–∑–∫–∏ –∑–∞ —É–∫–∞–∑–∞–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥
        shipments = await get_shipments_for_period(session, start_date, end_date)

        if shipments:
            small_packs, large_packs = shipments
            total_packs = (small_packs or 0) + (large_packs or 0)
            await message.answer(f"–û—Ç–≥—Ä—É–∑–∫–∏ –∑–∞ –ø–µ—Ä–∏–æ–¥ —Å {start_date_str} –ø–æ {end_date_str}:\n"
                                 f"–ü–∞—á–∫–∏ –ø–æ 3 –∫–≥: {small_packs or 0}\n"
                                 f"–ü–∞—á–∫–∏ –ø–æ 5 –∫–≥: {large_packs or 0}\n"
                                 f"–û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–∞—á–µ–∫: {total_packs}")
        else:
            await message.answer("–í —É–∫–∞–∑–∞–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥ –Ω–µ—Ç –æ—Ç–≥—Ä—É–∑–æ–∫.")

    except ValueError:
        await message.answer("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç: –¥–¥.–º–º.–≥–≥–≥–≥ - –¥–¥.–º–º.–≥–≥–≥–≥")
# –•–µ–Ω–¥–ª–µ—Ä –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–ó–∞–∫—Ä—ã—Ç—å –º–µ–Ω—é"
@router.callback_query(F.data == "statistics:close")
async def close_shipment_menu(callback_query: CallbackQuery):
    """–ó–∞–∫—Ä—ã—Ç–∏–µ –º–µ–Ω—é –æ—Ç–≥—Ä—É–∑–∫–∏"""
    await callback_query.message.delete()
    await callback_query.answer()