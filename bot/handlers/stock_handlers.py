import asyncio

from aiogram import Bot
from sqlalchemy.ext.asyncio import AsyncSession

from bot.handlers.statistics import format_stock_info
from bot.services.statistics import get_stock_info


async def send_daily_stock_report(bot: Bot, session: AsyncSession):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –æ—Ç—á–µ—Ç –æ–± –æ—Å—Ç–∞—Ç–∫–∞—Ö —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ–º —Å–µ—Å—Å–∏–µ–π"""
    try:
        from bot.services.db_service import get_admin_ids

        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –≤–Ω—É—Ç—Ä–∏ –∞–∫—Ç–∏–≤–Ω–æ–π —Å–µ—Å—Å–∏–∏
        stock_data = await get_stock_info(session)
        admin_ids = await get_admin_ids(session)

        if not admin_ids:
            print("–ù–µ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ—Ç—á–µ—Ç–∞")
            return

        report_text = await _format_daily_report(stock_data)

        for admin_id in admin_ids:
            try:
                await bot.send_message(
                    admin_id,
                    report_text,
                    parse_mode="HTML"
                )
                await asyncio.sleep(0.3)  # –ó–∞—â–∏—Ç–∞ –æ—Ç —Ñ–ª—É–¥–∞
            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ admin {admin_id}: {str(e)}")

    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è –æ—Ç—á–µ—Ç–∞: {str(e)}")
        raise


async def _format_daily_report(stock_data: dict) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç—á–µ—Ç–∞ —Å –¥–∞—Ç–æ–π"""
    from datetime import datetime
    date_str = datetime.now().strftime("%d.%m.%Y")

    text = (
        f"üìÖ <b>–ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π –æ—Ç—á–µ—Ç –Ω–∞ {date_str}</b>\n\n"
        f"{format_stock_info(stock_data)}\n"
        f"üìä <b>–ò—Ç–æ–≥–æ:</b>\n"
        f"‚îú –°—ã—Ä—å—ë: <b>{sum(stock_data.get('raw_materials', {}).values())} –∫–≥</b>\n"
        f"‚îî –ü—Ä–æ–¥—É–∫—Ü–∏—è: <b>{sum(stock_data.get('products', {}).values())} —à—Ç.</b>"
    )
    return text
