from sqlalchemy.ext.asyncio import AsyncSession
from sqlalchemy.future import select
from sqlalchemy.orm import selectinload

from bot.models import RawMaterialStorage, RawProduct, Arrival


# üè≠ –ü–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â–∏–π —Å–∫–ª–∞–¥ (–µ—Å–ª–∏ –Ω–µ—Ç ‚Äî —Å–æ–∑–¥–∞—Ç—å)
async def get_raw_material_storage(session: AsyncSession):
    result = await session.execute(select(RawMaterialStorage).limit(1))
    stock = result.scalar_one_or_none()

    if not stock:
        stock = RawMaterialStorage()  # –°–æ–∑–¥–∞—ë–º –Ω–æ–≤—É—é –∑–∞–ø–∏—Å—å
        session.add(stock)
        await session.commit()
        await session.refresh(stock)  # –û–±–Ω–æ–≤–ª—è–µ–º –æ–±—ä–µ–∫—Ç –ø–æ—Å–ª–µ –∫–æ–º–º–∏—Ç–∞

    return stock

# ‚ûï –û–±–Ω–æ–≤–∏—Ç—å –ø—Ä–∏—Ö–æ–¥ –ø–µ–ª–ª–µ—Ç (–∞—Ç–æ–º–∞—Ä–Ω–æ)
async def update_stock_arrival(session: AsyncSession, type: str, amount: int):
    """
    –û–±–Ω–æ–≤–∏—Ç—å —Å–∫–ª–∞–¥ –ø–æ—Å–ª–µ –ø—Ä–∏—Ö–æ–¥–∞ –ø—Ä–æ–¥—É–∫—Ü–∏–∏.
    –£–≤–µ–ª–∏—á–∏–≤–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–∞—Ç–µ—Ä–∏–∞–ª–∞ –Ω–∞ —Å–∫–ª–∞–¥–µ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Å—É–º–º—ã –ø—Ä–∏—Ö–æ–¥–∞.
    """
    # –ü–æ–ª—É—á–∞–µ–º ID –ø—Ä–æ–¥—É–∫—Ç–∞ –ø–æ –∏–º–µ–Ω–∏ type
    result = await session.execute(select(RawProduct.id).filter(RawProduct.name == type))
    product_id = result.scalar_one_or_none()


    if not product_id:
        # –ï—Å–ª–∏ –ø—Ä–æ–¥—É–∫—Ç —Å —Ç–∞–∫–∏–º –∏–º–µ–Ω–µ–º –Ω–µ –Ω–∞–π–¥–µ–Ω, –≤—ã–±—Ä–∞—Å—ã–≤–∞–µ–º –æ—à–∏–±–∫—É
        raise ValueError(f"–ü—Ä–æ–¥—É–∫—Ç —Å –∏–º–µ–Ω–µ–º {type} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.")

    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ –ø—Ä–æ–¥—É–∫—Ç–µ –Ω–∞ —Å–∫–ª–∞–¥–µ
    all_stock = await session.execute(select(RawMaterialStorage).options(selectinload(RawMaterialStorage.raw_product)))
    stock = all_stock.scalars().all()  # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∑–∞–ø–∏—Å–∏ —Å–∫–ª–∞–¥–∞


    # –ü—Ä–æ—Ö–æ–¥–∏–º –ø–æ –≤—Å–µ–º –º–∞—Ç–µ—Ä–∏–∞–ª–∞–º –Ω–∞ —Å–∫–ª–∞–¥–µ –∏ –æ–±–Ω–æ–≤–ª—è–µ–º –∏—Ö
    for item in stock:
        if item.raw_product.id == product_id:  # –°—Ä–∞–≤–Ω–∏–≤–∞–µ–º –ø–æ ID –ø—Ä–æ–¥—É–∫—Ç–∞
            item.amount += amount  # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–∞ —Å–∫–ª–∞–¥–µ
            session.add(item)  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è

    # –ï—Å–ª–∏ –ø—Ä–æ–¥—É–∫—Ç–∞ –Ω–µ—Ç –≤ –±–∞–∑–µ (–Ω–∞–ø—Ä–∏–º–µ—Ä, –Ω–µ—Ç –∑–∞–ø–∏—Å–∏ –≤ raw_material_storage), –¥–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—É—é –∑–∞–ø–∏—Å—å
    if not any(item.raw_product.id == product_id for item in stock):
        new_item = RawMaterialStorage(raw_product_id=product_id, amount=amount)  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–∞–π–¥–µ–Ω–Ω—ã–π ID –ø—Ä–æ–¥—É–∫—Ç–∞
        session.add(new_item)

    # await session.commit()  # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ –ë–î

# ‚ûñ –û–±–Ω–æ–≤–∏—Ç—å –ø–æ—Å–ª–µ —Ñ–∞—Å–æ–≤–∫–∏ (–∞—Ç–æ–º–∞—Ä–Ω–æ)
async def update_stock_packaging(session: AsyncSession, used_pellets: int, small_packs: int, large_packs: int):
     # –ì–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ–º –∞—Ç–æ–º–∞—Ä–Ω–æ—Å—Ç—å
    stock = await get_raw_material_storage(session)

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ–∫ –ø–µ–ª–ª–µ—Ç –ø–µ—Ä–µ–¥ —Ñ–∞—Å–æ–≤–∫–æ–π
    if stock.pellets_6mm < used_pellets:
        raise ValueError("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø–µ–ª–ª–µ—Ç –Ω–∞ —Å–∫–ª–∞–¥–µ!")

    stock.pellets_6mm -= used_pellets
    stock.packs_3kg += small_packs
    stock.packs_5kg += large_packs

    await session.commit()

async def edit_stock_arival(session: AsyncSession, arrival_id: int, new_amount: int):
    """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –ø—Ä–∏—Ö–æ–¥–∞ –∏ —Å–∫–ª–∞–¥–∞"""
    arrival = await session.get(Arrival, arrival_id)

    # if not arrival:
    #     await message.answer("‚ùå –ü—Ä–∏—Ö–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω.")
    #     return

    delta = arrival.amount - new_amount
    arrival.amount = new_amount
    await update_stock_arrival(session, arrival.type, amount=delta*(-1))



