from functools import wraps
from aiogram import types
from aiogram.dispatcher.event.bases import CancelHandler

from cachetools import TTLCache
from sqlalchemy.ext.asyncio import AsyncSession
from sqlalchemy.future import select
from bot.models.user import User

# –ö–µ—à –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Ä–æ–ª–µ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (–∞–∫—Ç—É–∞–ª—å–Ω–æ—Å—Ç—å 5 –º–∏–Ω—É—Ç)
role_cache = TTLCache(maxsize=1000, ttl=300)


def extract_user(update: types.Update) -> types.User:
    """–ò–∑–≤–ª–µ–∫–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ —Ä–∞–∑–Ω—ã—Ö —Ç–∏–ø–æ–≤ –∞–ø–¥–µ–π—Ç–æ–≤"""
    if isinstance(update, types.Message):
        return update.from_user
    elif isinstance(update, types.CallbackQuery):
        return update.from_user
    raise CancelHandler()


async def get_or_create_user(session: AsyncSession, telegram_id: int, full_name: str) -> User:
    """–ü–æ–ª—É—á–∞–µ—Ç –∏–ª–∏ —Å–æ–∑–¥–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ë–î"""
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–µ—à
    if telegram_id in role_cache:
        return role_cache[telegram_id]

    # –ò—â–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ë–î
    result = await session.execute(select(User).where(User.telegram_id == telegram_id))
    user = result.scalars().first()

    if not user:
        # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user = User(telegram_id=telegram_id, full_name=full_name, role="anonymous")
        session.add(user)
        await session.commit()
        await session.refresh(user)

    # –û–±–Ω–æ–≤–ª—è–µ–º –∫–µ—à
    role_cache[telegram_id] = user
    return user


def admin_required(func):
    """–¢–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤"""

    @wraps(func)
    async def wrapper(update: types.Update, *args, **kwargs):
        from_user = extract_user(update)
        session: AsyncSession = kwargs.get('session')

        if not session:
            raise RuntimeError("–°–µ—Å—Å–∏—è –ë–î –Ω–µ –ø–µ—Ä–µ–¥–∞–Ω–∞ –≤ –∞—Ä–≥—É–º–µ–Ω—Ç–∞—Ö")

        user = await get_or_create_user(session, from_user.id, from_user.full_name)

        if user.role != "admin":
            if isinstance(update, types.CallbackQuery):
                await update.answer("üîê –î–æ—Å—Ç—É–ø –∑–∞–∫—Ä—ã—Ç! –¢–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤.", show_alert=True)
            else:
                await update.answer("üîê –î–æ—Å—Ç—É–ø –∑–∞–∫—Ä—ã—Ç! –¢–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤.")
            raise CancelHandler()

        return await func(update, *args, **kwargs)

    return wrapper


def staff_required(func):
    """–î–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤, –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤ –∏ –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–≤"""

    @wraps(func)
    async def wrapper(update: types.Update, *args, **kwargs):
        from_user = extract_user(update)
        session: AsyncSession = kwargs.get('session')

        if not session:
            raise RuntimeError("–°–µ—Å—Å–∏—è –ë–î –Ω–µ –ø–µ—Ä–µ–¥–∞–Ω–∞ –≤ –∞—Ä–≥—É–º–µ–Ω—Ç–∞—Ö")

        user = await get_or_create_user(session, from_user.id, from_user.full_name)

        if user.role not in ("admin", "manager"):
            message = "üëÆ‚Äç‚ôÇÔ∏è –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤! –î–æ—Å—Ç—É–ø–Ω–æ –¥–ª—è: –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤, –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤ –∏ –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–≤."
            if isinstance(update, types.CallbackQuery):
                await update.answer(message, show_alert=True)
            else:
                await update.answer(message)
            raise CancelHandler()

        return await func(update, *args, **kwargs)

    return wrapper


def restrict_anonymous(func):
    """–ë–ª–æ–∫–∏—Ä—É–µ—Ç –∞–Ω–æ–Ω–∏–º–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""

    @wraps(func)
    async def wrapper(update: types.Update, *args, **kwargs):
        from_user = extract_user(update)
        session: AsyncSession = kwargs.get('session')

        if not session:
            raise RuntimeError("–°–µ—Å—Å–∏—è –ë–î –Ω–µ –ø–µ—Ä–µ–¥–∞–Ω–∞ –≤ –∞—Ä–≥—É–º–µ–Ω—Ç–∞—Ö")

        # –ë—ã—Å—Ç—Ä–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∞–Ω–æ–Ω–∏–º–Ω–æ—Å—Ç—å –±–µ–∑ –∑–∞–ø—Ä–æ—Å–∞ –∫ –ë–î
        if getattr(from_user, 'is_anonymous', False):
            await update.answer("üëª –ê–Ω–æ–Ω–∏–º—ã –Ω–µ –ø—Ä–æ—Ö–æ–¥—è—Ç! –í–∞—à ID —Å–æ—Ö—Ä–∞–Ω–µ–Ω. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.")
            raise CancelHandler()

        user = await get_or_create_user(session, from_user.id, from_user.full_name)

        if user.role == "anonymous":
            await update.answer("‚ùå –í–∞—à –∞–∫–∫–∞—É–Ω—Ç –Ω–µ –≤–µ—Ä–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.")
            raise CancelHandler()

        return await func(update, *args, **kwargs)

    return wrapper